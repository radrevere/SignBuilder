var fontlib = require('./fontlib');
var borders = require('./borders');
var svglib = require('./svglib');
var common = require('./signcommon');

var layout = {};

module.exports = layout;
layout.precision = 4;


// TODO: correct arrow sizes - See 3E.10 in Forest Service Manual for details
// use only path data for insertion into a final output svg to display
// this will allow me to insert and color or outline at will
var frdleft={"name":"left","width":107.678,"height":95.905,"svgPathData":"\"M107.678,64.909H73.766l6.696,22.356c0.107,0.756,0.107,1.296,0.107,1.62c0,5.184-4.104,7.02-7.128,7.02c-1.62,0-2.592-0.432-3.456-0.864L0,47.953L69.985,1.08c0.432-0.324,0.648-0.432,0.972-0.54c1.08-0.324,1.944-0.54,2.7-0.54c2.16,0,2.916,0.216,4.645,1.512c1.836,1.296,2.268,4.212,2.268,5.4V8.1c0,0.108,0,0.324-0.107,0.432l-6.696,22.464h33.912V64.909z\""};
var frdright={"name":"right","width":107.678,"height":95.905,"svgPathData":"\"M107.678,47.953L37.693,95.042c-0.973,0.432-1.837,0.864-3.673,0.864c-1.188,0-2.052-0.108-2.592-0.324c-1.188-0.324-4.536-3.24-4.536-6.048c0-0.324,0.108-0.324,0.108-0.648v-1.08c0-0.108,0-0.324,0.107-0.54l6.805-22.356H0V30.997h33.913L27.108,8.532c-0.107-0.756-0.107-1.296-0.107-1.62c0-2.376,0.864-4.212,2.483-5.4C31.213,0.216,32.293,0,34.021,0c1.08,0,1.944,0.108,2.593,0.432c0.323,0.108,0.54,0.324,1.08,0.648L107.678,47.953z\""};
var frdup={"name":"up","width":96.122,"height":107.678,"svgPathData":"\"M95.042,69.985c0.324,0.54,0.432,0.756,0.54,1.08c0.324,1.08,0.54,1.944,0.54,2.7c0,1.188-0.108,2.052-0.324,2.592c0,1.188-3.672,4.536-6.156,4.536c-0.324,0-0.216-0.108-0.54-0.108h-1.188c-0.108,0-0.324,0-0.433-0.108l-22.464-6.912v33.913H31.104V73.765L8.641,80.677c-0.756,0.108-1.296,0.108-1.62,0.108C1.836,80.785,0,76.357,0,73.765c0-1.62,0.108-2.376,0.973-3.78L48.062,0L95.042,69.985z\""};
layout.frdArrowTypes = [frdleft,frdright,frdup];
var tdleft={"name":"left","width":144.021,"height":72.086,"svgPathData":"\"M4.888,29.16L79.461,0.518c5.115-1.899,10.559,1.662,10.559,6.884v19.761h54v18h-54v19.521c0,5.222-5.444,8.783-10.559,6.884L4.888,42.927C-1.629,40.474-1.629,31.613,4.888,29.16z\""};
var tdright={"name":"right","width":144.021,"height":72.086,"svgPathData":"\"M139.133,29.16L64.559,0.518C59.444-1.381,54,2.18,54,7.402v19.761H0v18h54v19.521c0,5.222,5.444,8.783,10.559,6.884l74.574-28.642C145.65,40.474,145.65,31.613,139.133,29.16z\""};
var tdup={"name":"up","width":72.086,"height":108,"svgPathData":"\"M7.655,72h19.489v36h17.964V72h19.25c5.703,0,9.369-6.027,6.843-10.996L42.85,4.154c-2.851-5.62-10.836-5.62-13.687,0L0.812,61.004C-1.714,66.054,1.952,72,7.655,72z\""};
layout.tdArrowTypes = [tdleft,tdright,tdup];

var arSignShape = ["Rectangle","Diamond","Octagon","Yield","Circle","School Pentagon",
    "Penant","Rail Cross","Interstate Shield 1","Interstate Shield 2","Highway Shield 1","Highway Shield 2",
    "Beehive 1", "Beehive 2","County Pentagon"];
var beehive1={"name":"beehive1","width":1746.001,"height":1737.971,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"1746.001\" height=\"1737.971\"><path fill=\"#FFFFFF\" d=\"M1745.501,1386.665l-84.961-78.895l0,0c2.072-10.818,3.107-22.658,3.107-35.52l0,0v-0.244l-0.182-20.777l0,0c-0.037-28.887-6.251-55.178-18.643-78.873c9.006-22.791,13.509-47.455,13.509-73.988c0-52.252-15.632-95.357-46.897-129.318c3.545-16.709,5.316-33.797,5.316-51.264c0-36.113-7.408-70.328-22.227-102.646c-10.521-22.945-23.987-43.231-40.401-60.858c0.078-2.184,0.118-4.201,0.118-6.049c0-44.72-10.96-85.873-32.879-123.458c-16.342-28.02-36.931-50.91-61.769-68.671c-3.416-40.463-16.184-77.525-38.303-111.186c-20.653-31.429-46.593-55.525-77.819-72.288c-9.138-33.066-25.705-61.844-49.704-86.335c-22.556-23.019-48.263-38.699-77.12-47.043c-10.787-34.276-29.65-63.408-56.587-87.397c-33.492-29.826-71.94-44.744-115.347-44.753c-15.095-28.13-35.481-51.526-61.159-70.188C950.152,12.638,913.279,0.5,872.935,0.5c-40.344,0-77.217,12.138-110.619,36.413c-25.678,18.662-46.064,42.058-61.159,70.188c-43.393,0.009-81.831,14.929-115.315,44.757c-26.914,23.975-45.789,53.104-56.625,87.388c-28.837,8.342-54.537,24.024-77.103,47.044c-24.011,24.496-40.596,53.275-49.753,86.337c-31.214,16.765-57.145,40.864-77.792,72.296c-22.114,33.666-34.879,70.729-38.294,111.191c-24.82,17.762-45.4,40.646-61.741,68.653c-21.936,37.599-32.904,78.753-32.904,123.465c0,1.863,0.039,3.888,0.115,6.074c-16.389,17.628-29.834,37.917-40.337,60.865c-14.784,32.307-22.177,66.512-22.177,102.614c0,17.52,1.747,34.594,5.239,51.225c-31.287,33.969-46.932,77.086-46.932,129.357c0,26.549,4.508,51.213,13.524,73.99c-12.439,23.748-18.659,50.127-18.659,79.135c0,2.893-0.097,7.398-0.291,13.518c-0.216,6.801-0.324,11.992-0.324,15.57c0,9.779,0.74,18.955,2.221,27.523l0,0L0.5,1391.219v346.252h1745.001V1386.665z\"/><path fill=\"#000000\" d=\"M1615.381,1321.887c14.735-20.131,12.112-43.969,12.112-71.34c0-29.254-10.382-55.801-26.791-75.932c13.786-21.896,21.656-49.385,21.656-77.697c0-46.736-20.818-87.822-53.805-113.484c7.87-21.014,12.224-43.912,12.224-67.691c0-57.567-25.228-109.718-64.241-143.622c0.782-9.124,1.73-17.306,1.73-26.488c0-71.399-38.12-133.557-93.71-164.636c0-1.825,0-3.708,0-5.533c0-78.698-45.934-145.447-111.012-172.876c-10.381-66.749-61.506-118.9-124.909-128.083c-12.056-72.164-71.943-127.141-143.941-127.141c-6.977,0-13.005,0.942-19.981,1.884c-24.278-64.042-83.217-108.835-151.756-108.835c-68.538,0-127.477,44.793-151.755,108.835c-6.977-0.942-13.005-1.884-19.981-1.884c-71.998,0-131.774,54.977-143.997,127.141c-63.292,9.183-114.473,61.334-124.909,128.083c-65.022,27.429-110.956,94.179-110.956,172.876c0,1.825,0,3.708,0,5.533c-55.534,31.079-93.71,93.236-93.71,164.636c0,9.182,0.893,17.364,1.73,26.488c-38.958,33.904-64.13,86.055-64.13,143.622c0,23.779,4.242,46.678,12.112,67.691c-32.986,25.662-53.804,66.748-53.804,113.484c0,28.312,7.869,55.801,21.711,77.697c-16.465,20.131-26.846,46.678-26.846,75.932c0,27.371-4.41,51.209,10.381,71.34c-78.083,72.223-78.083,72.223-78.083,72.223c0,290.012,0,280.814,0,280.814c1644.418,0,1644.418,0,1644.418,0c0-290.836,0-281.639,0-281.639l0,0L1615.381,1321.887L1615.381,1321.887\"/><path fill=\"#FFFFFF\" d=\"M1044.694,215.996c-15.628,0-31.2,3.649-45.098,10.065c-36.445,22.779-80.705,36.553-126.64,36.553c-45.989,0-90.138-13.774-126.639-36.553c-13.897-6.416-29.47-10.065-45.098-10.065c-54.641,0-99.793,42.027-107.551,97.004c85.003,42.086,179.55,64.924,279.287,64.924c99.738,0,194.285-22.838,279.288-64.924C1144.487,258.023,1099.335,215.996,1044.694,215.996L1044.694,215.996\"/><path fill=\"#FFFFFF\" d=\"M872.957,104.395c-55.533,0-103.254,35.611-124.016,85.997c33.878,28.312,77.189,44.794,124.016,44.794c46.828,0,90.194-16.481,124.017-44.794C976.155,140.006,928.492,104.395,872.957,104.395L872.957,104.395\"/><path fill=\"#FFFFFF\" d=\"M1543.438,1172.85c19.98-21.072,32.093-49.443,32.093-81.465c0-42.086-21.712-79.521-54.642-99.711c8.651-20.072,13.005-42.145,13.005-64.924c0-55.861-26.009-104.362-65.915-134.5c2.623-11.89,3.404-23.721,3.404-35.67c0-65.925-37.283-123.492-90.138-149.097c0.837-9.182,1.73-17.364,1.73-26.487c0-72.282-47.665-133.557-111.067-149.097c-9.488-48.561-45.99-86.88-91.924-96.062c-2.568,0-2.568,0-2.568,0c-92.035,48.502-195.178,74.99-304.46,74.99c-109.281,0-212.535-26.488-304.459-74.99c-2.623,0-2.623,0-2.623,0c-45.935,9.182-82.38,47.501-91.868,96.062c-63.403,15.54-111.068,76.814-111.068,149.097c0,9.123,0.949,17.305,1.73,26.487c-52.911,25.605-90.193,83.172-90.193,149.097c0,11.949,0.837,23.78,3.46,35.67c-39.85,30.137-65.915,78.638-65.915,134.5c0,22.779,4.354,44.852,13.005,64.924c-32.93,20.189-54.585,57.625-54.585,99.711c0,32.021,12.055,60.393,32.036,81.465c-22.604,16.422-37.228,43.852-37.228,74.93c0,30.139,13.842,56.686,35.554,73.225c11.218,5.475,50.287,22.838,50.287,22.838c161.3,68.574,335.659,110.66,517.776,122.609c0-111.66,0-111.66,0-111.66c0-60.334,46.883-109.719,104.091-109.719c57.209,0,104.092,49.385,104.092,109.719c0,111.66,0,111.66,0,111.66c182.173-11.949,356.421-54.035,517.776-122.609c0,0,39.069-17.363,50.287-22.838c21.712-16.539,35.665-43.086,35.665-73.225C1580.777,1216.702,1565.931,1189.272,1543.438,1172.85L1543.438,1172.85\"/><path fill=\"#FFFFFF\" d=\"M1634.469,1393.286c-61.561-52.209-61.561-52.209-61.561-52.209c-212.48,103.361-450.188,161.869-699.951,161.869c-249.818,0-487.47-58.508-699.894-161.869c-61.618,52.209-61.618,52.209-61.618,52.209c121.338,21.898,121.338,21.898,121.338,21.898c-140.481,21.955-140.481,21.955-140.481,21.955c0,203.072,0,203.072,0,203.072c1561.256,0,1561.256,0,1561.256,0c0-203.072,0-203.072,0-203.072c-140.537-21.955-140.537-21.955-140.537-21.955l0,0L1634.469,1393.286L1634.469,1393.286\"/></svg>"};
var beehive2={"name":"beehive2","width":2178.002,"height":1736.976,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"2178.002\" height=\"1736.976\"><path fill=\"#FFFFFF\" d=\"M2177.498,1414.472l-103.611-77.942l0,0c2.588-11.061,3.883-23.165,3.883-36.313l0,0v-0.249l-0.227-21.243l0,0c-0.047-29.534-7.814-56.414-23.303-80.638c11.256-23.304,16.885-48.519,16.885-75.646c0-53.42-19.541-97.491-58.621-132.213c4.43-17.082,6.646-34.553,6.646-52.412c0-36.92-9.262-71.9-27.785-104.941c-13.15-23.459-29.984-44.199-50.5-62.221c0.098-2.232,0.146-4.294,0.146-6.185c0-45.721-13.699-87.794-41.1-126.221c-20.425-28.646-46.162-52.05-77.208-70.208c-4.271-41.369-20.231-79.261-47.879-113.675c-25.816-32.133-58.241-56.769-97.275-73.906c-11.421-33.807-32.131-63.229-62.129-88.268c-28.195-23.533-60.328-39.565-96.4-48.096c-13.484-35.043-37.062-64.827-70.734-89.354c-41.864-30.494-89.925-45.745-144.183-45.755c-18.869-28.76-44.352-52.68-76.449-71.759C1185.901,12.409,1139.809,0,1089.379,0c-50.43,0-96.521,12.409-138.274,37.229c-32.098,19.079-57.581,42.999-76.449,71.759c-54.24,0.01-102.288,15.263-144.144,45.759c-33.642,24.511-57.236,54.293-70.782,89.344c-36.045,8.529-68.171,24.562-96.377,48.097c-30.015,25.045-50.745,54.468-62.192,88.271c-39.017,17.14-71.431,41.778-97.24,73.914c-27.643,34.419-43.598,72.312-47.867,113.68c-31.026,18.159-56.751,41.556-77.176,70.189c-27.42,38.439-41.13,80.516-41.13,126.229c0,1.905,0.048,3.975,0.144,6.21c-20.486,18.023-37.293,38.766-50.42,62.228c-18.481,33.029-27.722,68-27.722,104.909c0,17.912,2.183,35.369,6.549,52.373c-39.109,34.728-58.665,78.812-58.665,132.252c0,27.144,5.636,52.359,16.906,75.646c-15.55,24.281-23.324,51.25-23.324,80.906c0,2.958-0.122,7.564-0.364,13.819c-0.27,6.955-0.405,12.262-0.405,15.92c0,10,0.925,19.38,2.775,28.139l0,0L0.504,1419.722L0,1736.976h2178.002L2177.498,1414.472z\"/><path fill=\"#000000\" d=\"M2117.109,1424l-99.695-72.997l0,0c18.418-20.581,15.139-44.954,15.139-72.938c0-29.908-12.977-57.05-33.486-77.63c17.23-22.387,27.068-50.491,27.068-79.437c0-47.783-26.023-89.787-67.254-116.025c9.836-21.484,15.277-44.895,15.277-69.206c0-58.855-31.533-112.174-80.301-146.837c0.979-9.328,2.164-17.692,2.164-27.08c0-72.998-47.651-136.547-117.138-168.321c0-1.865,0-3.791,0-5.657c0-80.459-57.417-148.702-138.765-176.745c-12.977-68.243-76.882-121.562-156.137-130.95c-15.069-73.779-89.929-129.986-179.927-129.986c-8.721,0-16.256,0.963-24.977,1.926c-30.348-65.476-104.021-111.271-189.694-111.271c-85.673,0-159.346,45.796-189.694,111.271c-8.721-0.963-16.255-1.926-24.976-1.926c-89.999,0-164.718,56.207-179.997,129.986c-79.115,9.388-143.09,62.707-156.137,130.95c-81.277,28.043-138.695,96.286-138.695,176.745c0,1.866,0,3.792,0,5.657c-69.417,31.774-117.138,95.323-117.138,168.321c0,9.388,1.117,17.752,2.163,27.08c-48.697,34.663-80.162,87.981-80.162,146.837c0,24.312,5.302,47.722,15.14,69.206c-41.232,26.238-67.255,68.242-67.255,116.025c0,28.945,9.837,57.05,27.14,79.437c-20.582,20.58-33.558,47.722-33.558,77.63c0,27.983-5.512,52.356,12.976,72.938c-97.603,73.84-97.603,73.84-97.603,73.84l0,0v249.129l0,0c2055.52,0,2055.52,0,2055.52,0l0,0V1424L2117.109,1424\"/><path fill=\"#FFFFFF\" d=\"M1304.06,220.318c-19.534,0-38.999,3.731-56.371,10.291c-45.558,23.289-100.882,37.371-158.299,37.371c-57.487,0-112.672-14.082-158.299-37.371c-17.372-6.56-36.836-10.291-56.371-10.291c-68.301,0-124.742,42.968-134.439,99.175c106.254,43.028,224.438,66.378,349.11,66.378s242.856-23.35,349.11-66.378C1428.802,263.286,1372.362,220.318,1304.06,220.318L1304.06,220.318\"/><path fill=\"#FFFFFF\" d=\"M1089.39,106.219c-69.417,0-129.067,36.408-155.021,87.922c42.348,28.946,96.487,45.796,155.021,45.796s112.742-16.85,155.02-45.796C1218.387,142.627,1158.807,106.219,1089.39,106.219L1089.39,106.219\"/><path fill=\"#FFFFFF\" d=\"M1927.49,1198.589c24.977-21.544,40.115-50.551,40.115-83.287c0-43.028-27.139-81.303-68.301-101.943c10.814-20.521,16.256-43.089,16.256-66.378c0-57.11-32.511-106.697-82.394-137.509c3.279-12.156,4.256-24.253,4.256-36.469c0-67.4-46.604-126.256-112.672-152.434c1.046-9.388,2.162-17.753,2.162-27.081c0-73.899-59.58-136.546-138.834-152.433c-11.86-49.648-57.488-88.825-114.905-98.213c-3.209,0-3.209,0-3.209,0c-115.045,49.588-243.973,76.668-380.575,76.668s-265.669-27.08-380.575-76.668c-3.279,0-3.279,0-3.279,0c-57.417,9.388-102.975,48.564-114.835,98.213c-79.254,15.887-138.834,78.533-138.834,152.433c0,9.328,1.186,17.693,2.162,27.081c-66.138,26.178-112.742,85.033-112.742,152.434c0,12.216,1.046,24.312,4.325,36.469c-49.813,30.812-82.394,80.398-82.394,137.509c0,23.289,5.442,45.856,16.255,66.378c-41.162,20.641-68.231,58.915-68.231,101.943c0,32.736,15.07,61.743,40.046,83.287c-28.255,16.79-46.534,44.834-46.534,76.607c0,30.812,17.302,57.953,44.441,74.863c14.023,5.597,62.859,23.35,62.859,23.35c201.624,70.108,419.573,113.137,647.221,125.353c0-114.159,0-114.159,0-114.159c0-61.684,58.604-112.174,130.114-112.174s130.114,50.49,130.114,112.174c0,114.159,0,114.159,0,114.159c227.717-12.216,445.526-55.244,647.221-125.353c0,0,48.836-17.753,62.86-23.35c27.139-16.91,44.58-44.051,44.58-74.863C1974.164,1243.423,1955.607,1215.379,1927.49,1198.589L1927.49,1198.589\"/><path fill=\"#FFFFFF\" d=\"M2064.992,1615.147l0.15-146.404l0,0c-175.672-22.447-175.672-22.447-175.672-22.447l0,0l151.812-22.387l0,0c-76.953-53.379-76.953-53.379-76.953-53.379c-265.599,105.675-562.734,165.493-874.937,165.493c-312.273,0-609.338-59.818-874.868-165.493c-77.022,53.379-77.022,53.379-77.022,53.379c151.672,22.387,151.672,22.387,151.672,22.387c-175.601,22.447-175.601,22.447-175.601,22.447l0,0l0.146,146.06L2064.992,1615.147L2064.992,1615.147\"/></svg>"};
var beehiveborder1={"name":"beehiveborder1","width":1746.001,"height":1737.971,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"1746.001\" height=\"1737.971\"><path fill=\"none\" d=\"M1745.501,1386.665l-84.961-78.895l0,0c2.072-10.818,3.107-22.658,3.107-35.52l0,0v-0.244l-0.182-20.777l0,0c-0.037-28.887-6.251-55.178-18.643-78.873c9.006-22.791,13.509-47.455,13.509-73.988c0-52.252-15.632-95.357-46.897-129.318c3.545-16.709,5.316-33.797,5.316-51.264c0-36.113-7.408-70.328-22.227-102.646c-10.521-22.945-23.987-43.231-40.401-60.858c0.078-2.184,0.118-4.201,0.118-6.049c0-44.72-10.96-85.873-32.879-123.458c-16.342-28.02-36.931-50.91-61.769-68.671c-3.416-40.463-16.184-77.525-38.303-111.186c-20.653-31.429-46.593-55.525-77.819-72.288c-9.138-33.066-25.705-61.844-49.704-86.335c-22.556-23.019-48.263-38.699-77.12-47.043c-10.787-34.276-29.65-63.408-56.587-87.397c-33.492-29.826-71.94-44.744-115.347-44.753c-15.095-28.13-35.481-51.526-61.159-70.188C950.152,12.638,913.279,0.5,872.935,0.5c-40.344,0-77.217,12.138-110.619,36.413c-25.678,18.662-46.064,42.058-61.159,70.188c-43.393,0.009-81.831,14.929-115.315,44.757c-26.914,23.975-45.789,53.104-56.625,87.388c-28.837,8.342-54.537,24.024-77.103,47.044c-24.011,24.496-40.596,53.275-49.753,86.337c-31.214,16.765-57.145,40.864-77.792,72.296c-22.114,33.666-34.879,70.729-38.294,111.191c-24.82,17.762-45.4,40.646-61.741,68.653c-21.936,37.599-32.904,78.753-32.904,123.465c0,1.863,0.039,3.888,0.115,6.074c-16.389,17.628-29.834,37.917-40.337,60.865c-14.784,32.307-22.177,66.512-22.177,102.614c0,17.52,1.747,34.594,5.239,51.225c-31.287,33.969-46.932,77.086-46.932,129.357c0,26.549,4.508,51.213,13.524,73.99c-12.439,23.748-18.659,50.127-18.659,79.135c0,2.893-0.097,7.398-0.291,13.518c-0.216,6.801-0.324,11.992-0.324,15.57c0,9.779,0.74,18.955,2.221,27.523l0,0L0.5,1391.219v346.252h1745.001V1386.665z\"/></svg>"};
var beehiveborder2={"name":"beehiveborder2","width":2178.002,"height":1736.976,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"2178.002\" height=\"1736.976\"><path fill=\"none\" d=\"M2177.498,1414.472l-103.611-77.942l0,0c2.588-11.061,3.883-23.165,3.883-36.313l0,0v-0.249l-0.227-21.243l0,0c-0.047-29.534-7.814-56.414-23.303-80.638c11.256-23.304,16.885-48.519,16.885-75.646c0-53.42-19.541-97.491-58.621-132.213c4.43-17.082,6.646-34.553,6.646-52.412c0-36.92-9.262-71.9-27.785-104.941c-13.15-23.459-29.984-44.199-50.5-62.221c0.098-2.232,0.146-4.294,0.146-6.185c0-45.721-13.699-87.794-41.1-126.221c-20.425-28.646-46.162-52.05-77.208-70.208c-4.271-41.369-20.231-79.261-47.879-113.675c-25.816-32.133-58.241-56.769-97.275-73.906c-11.421-33.807-32.131-63.229-62.129-88.268c-28.195-23.533-60.328-39.565-96.4-48.096c-13.484-35.043-37.062-64.827-70.734-89.354c-41.864-30.494-89.925-45.745-144.183-45.755c-18.869-28.76-44.352-52.68-76.449-71.759C1185.901,12.409,1139.809,0,1089.379,0c-50.43,0-96.521,12.409-138.274,37.229c-32.098,19.079-57.581,42.999-76.449,71.759c-54.24,0.01-102.288,15.263-144.144,45.759c-33.642,24.511-57.236,54.293-70.782,89.344c-36.045,8.529-68.171,24.562-96.377,48.097c-30.015,25.045-50.745,54.468-62.192,88.271c-39.017,17.14-71.431,41.778-97.24,73.914c-27.643,34.419-43.598,72.312-47.867,113.68c-31.026,18.159-56.751,41.556-77.176,70.189c-27.42,38.439-41.13,80.516-41.13,126.229c0,1.905,0.048,3.975,0.144,6.21c-20.486,18.023-37.293,38.766-50.42,62.228c-18.481,33.029-27.722,68-27.722,104.909c0,17.912,2.183,35.369,6.549,52.373c-39.109,34.728-58.665,78.812-58.665,132.252c0,27.144,5.636,52.359,16.906,75.646c-15.55,24.281-23.324,51.25-23.324,80.906c0,2.958-0.122,7.564-0.364,13.819c-0.27,6.955-0.405,12.262-0.405,15.92c0,10,0.925,19.38,2.775,28.139l0,0L0.504,1419.722L0,1736.976h2178.002L2177.498,1414.472z\"/></svg>"};
var highwayshield1={"name":"highwayshield1","width":58.062,"height":56.775,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"58.062\" height=\"56.775\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"none\" d=\"M29.03,56.775c-2.517-3.121-6.388-5.072-10.646-5.072H16.45c-9.099,0-16.45-7.219-16.45-16c0-2.34,0.578-4.682,1.547-6.828C4.449,23.023,3.289,15.803,0,11.121L11.417,0c2.323,1.951,5.421,3.121,8.899,3.121c3.295,0,6.393-1.17,8.714-3.121c2.517,1.951,5.614,3.121,8.905,3.121c3.289,0,6.387-1.17,8.901-3.121l11.226,10.928c-3.289,4.875-4.452,12.096-1.547,17.947c0.965,2.146,1.547,4.293,1.547,6.828c0,8.781-7.355,16-16.451,16H39.87C35.418,51.703,31.547,53.654,29.03,56.775\"/></svg>"};
var highwayshield2={"name":"highwayshield2","width":70.265,"height":55.428,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"70.265\" height=\"55.428\"><path fill=\"none\" d=\"M58.729,0l-0.019,0.01l-0.028,0.008l-0.011,0.01c-0.447,0.262-0.909,0.537-1.368,0.775l-0.027,0.01l-0.01,0.01c-0.82,0.453-1.747,0.84-2.611,1.215l-0.029,0.01l-0.038,0.02l-0.03,0.01c-2.373,0.953-4.797,1.332-7.354,1.51l-0.268,0.01l-0.812,0.01v-0.01l-0.222-0.01l-0.153-0.008l-0.286-0.02c-1.966-0.168-3.854-0.717-5.71-1.369l-0.039-0.01l-0.113-0.037l-0.059-0.027l-0.029-0.012c-0.404-0.125-0.79-0.307-1.166-0.496l-0.029-0.012L38.28,1.578c-0.62-0.291-1.234-0.629-1.846-0.938l-0.011-0.01l-0.229-0.115l-0.01-0.008l-0.038-0.02l-0.011-0.01l-0.057-0.029l-0.009-0.01l-0.173-0.086l-0.029-0.01l-0.009-0.008l-0.037-0.021l-0.009-0.01l-0.039-0.018l-0.01-0.01c-0.167-0.08-0.328-0.17-0.488-0.258h-0.01l-0.019,0.02L35.22,0.047l-0.011,0.01l-0.038,0.02l-0.027,0.029l-0.059,0.027l-0.029,0.01l-0.02,0.02l-0.02,0.01l-0.008,0.01l-0.02,0.008l-0.01,0.012c-0.089,0.043-0.172,0.096-0.259,0.143l-0.009,0.01l-0.039,0.018l-0.008,0.012L34.627,0.4l-0.011,0.01l-0.096,0.049l-0.009,0.01c-1.056,0.641-2.183,1.168-3.331,1.635l-0.017,0.012l-0.058,0.016c-2.256,0.885-5.03,1.273-7.441,1.465l-0.229,0.01l-0.307,0.01l-0.688,0.01v-0.01l-0.229-0.01l-0.154-0.01c-2.051-0.156-4.062-0.689-5.959-1.465l-0.029-0.008l-0.019-0.008l-0.028-0.012C15.518,1.9,15.013,1.705,14.52,1.48l-0.268-0.133L14.224,1.34l-0.096-0.049l-0.01-0.01c-0.33-0.156-0.648-0.332-0.975-0.496l-0.012-0.01l-0.094-0.049l-0.01-0.01L12.932,0.67l-0.009-0.012l-0.096-0.047l-0.01-0.008l-0.039-0.021l-0.008-0.008l-0.039-0.02l-0.008-0.01l-0.04-0.02l-0.009-0.01L12.444,0.4l-0.008-0.01c-0.133-0.064-0.25-0.143-0.384-0.209l-0.009-0.01l-0.115-0.057l-0.01-0.01l-0.039-0.02l-0.009-0.01l-0.077-0.037l-0.027-0.012l-0.02-0.018h-0.02L8.858,2.879l-0.01,0.02L5.979,5.766L5.97,5.787L3.099,8.654L3.091,8.676l-2.869,2.867l0.018,0.02v0.02H0.25v0.02h0.01l0.011,0.01v0.02h0.008v0.02h0.01l0.01,0.008v0.021h0.01l0.01,0.008v0.02h0.008v0.018h0.01l0.01,0.012v0.018h0.01v0.02h0.01l0.009,0.01v0.02h0.01v0.02h0.011l0.008,0.008v0.02h0.012v0.02h0.008v0.02h0.01v0.02h0.011v0.02H0.45l0.01,0.008v0.02h0.01v0.02h0.01v0.02H0.49v0.02h0.008v0.02h0.011v0.018h0.008l0.01,0.01v0.02h0.01l0.01,0.01v0.02h0.01v0.02h0.01l0.01,0.008v0.018h0.01v0.021h0.009l0.011,0.008v0.021h0.009v0.018h0.009v0.021h0.012l0.008,0.008v0.02h0.01v0.02h0.01v0.02H0.67l0.01,0.008v0.02h0.01v0.021H0.7v0.016h0.008v0.02H0.72v0.02h0.008v0.02h0.01v0.02h0.01l0.01,0.01v0.02h0.01V12.5h0.01v0.02h0.01l0.01,0.01v0.018h0.008v0.021h0.01v0.018h0.01v0.02h0.01l0.01,0.01v0.02h0.01v0.018H0.86l0.01,0.01v0.02h0.011v0.021h0.01l0.009,0.008v0.02h0.01v0.02H0.92l0.009,0.01v0.02h0.01v0.018h0.01l0.008,0.01v0.02h0.012v0.02h0.008l0.012,0.008v0.021h0.009v0.018h0.009l0.011,0.01v0.021h0.009v0.016h0.01v0.02h0.01v0.021h0.009v0.018h0.011v0.021h0.008v0.016h0.01l0.012,0.01v0.02h0.006v0.02h0.011v0.02h0.009v0.018H1.13v0.021h0.01v0.018h0.008v0.02h0.012l0.009,0.01v0.02h0.009v0.018h0.011v0.021h0.009l0.01,0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.02h0.01v0.02h0.009v0.02h0.009v0.02h0.012v0.018h0.008l0.01,0.01v0.02h0.01v0.02H1.32l0.011,0.01v0.02h0.01v0.018h0.008v0.02h0.011v0.02h0.009v0.02h0.01V13.6h0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.021h0.008v0.02h0.012v0.018h0.008l0.01,0.012v0.018h0.01v0.02h0.011v0.02h0.009v0.02h0.01v0.027h0.01v0.029h0.01l0.01,0.01v0.018h0.01v0.021H1.54v0.018h0.01v0.018h0.011v0.02h0.009v0.02h0.01v0.02H1.59v0.02h0.009v0.02h0.009v0.029h0.009v0.018h0.011v0.02h0.01v0.02h0.009v0.02h0.01v0.02h0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.02h0.01v0.02h0.01v0.027h0.01v0.02h0.01v0.018h0.01v0.021h0.008v0.018h0.011v0.02H1.77v0.018H1.78v0.031h0.008v0.018h0.01v0.021H1.81v0.018h0.009v0.02h0.009v0.02h0.011v0.029h0.009v0.027h0.01l0.01,0.01v0.02h0.01v0.02h0.009v0.02h0.011v0.018h0.01v0.02h0.01v0.027h0.008v0.02h0.01v0.029h0.01v0.029h0.01l0.01,0.008v0.02h0.01v0.02h0.01v0.018h0.01v0.02H2v0.021h0.011v0.027h0.008v0.02h0.01v0.02h0.011v0.029h0.009v0.02h0.01v0.018h0.01v0.029h0.008v0.018h0.012v0.02h0.008v0.029h0.01v0.029h0.01v0.029h0.01v0.027h0.009v0.029h0.011v0.02h0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.027h0.01v0.029h0.009v0.029h0.01v0.02H2.22v0.027h0.01v0.021h0.01v0.027h0.009v0.02h0.011v0.029h0.01V15.6h0.008v0.02h0.012v0.029h0.008v0.018h0.01v0.027h0.01v0.021h0.009v0.027h0.011v0.02h0.01v0.029h0.01v0.057h0.009v0.02h0.01v0.029h0.011v0.029h0.008v0.027h0.01v0.027h0.01v0.029h0.008v0.031h0.012v0.037h0.009v0.02H2.45v0.02h0.01v0.02h0.008v0.027h0.012v0.037h0.009v0.039h0.009v0.039h0.012v0.02h0.008v0.027h0.011v0.039h0.009v0.02h0.008v0.029h0.012v0.047h0.008v0.02h0.01v0.018h0.01v0.049h0.01v0.02h0.01v0.027h0.01v0.02h0.01v0.029h0.01v0.047H2.64v0.021h0.012v0.027h0.008v0.049H2.67v0.018h0.009v0.029h0.01v0.049H2.7v0.027h0.008v0.027h0.009v0.02h0.012v0.029h0.007v0.047h0.011v0.029h0.01v0.029h0.009v0.029h0.01v0.029h0.01v0.047h0.01v0.027h0.01v0.031h0.01v0.027h0.009v0.027h0.011v0.059h0.009v0.029h0.009v0.027h0.01v0.029h0.01v0.029h0.009v0.066h0.009v0.029h0.012v0.027h0.009v0.029h0.01v0.039h0.011v0.029h0.009v0.029h0.011v0.064h0.008v0.029h0.01v0.039h0.01v0.029h0.01v0.037h0.01V18h0.01v0.029h0.01v0.039h0.009v0.037h0.009v0.039h0.01v0.029h0.01v0.035h0.01v0.08h0.01v0.027h0.01v0.039h0.01v0.064h0.008v0.029h0.011v0.041h0.01v0.074h0.009v0.029h0.01v0.037h0.011v0.078h0.009v0.037h0.01v0.039h0.01v0.076h0.01V18.9h0.01v0.037h0.01v0.088h0.008v0.076h0.011v0.037h0.009v0.047h0.01v0.078h0.01v0.086h0.01v0.086h0.01v0.086h0.009v0.086h0.011v0.086H3.3v0.086h0.011v0.086h0.009v0.098H3.33v0.086h0.01v0.084h0.007v0.182h0.011v0.174h0.011v0.172h0.009l-0.009,0.832l-0.011,0.15l-0.011,0.078c-0.094,1.131-0.418,2.309-0.707,3.404l-0.018,0.098l-0.01,0.029l-0.01,0.02c-0.087,0.346-0.201,0.717-0.334,1.051l-0.01,0.049l-0.02,0.037c-0.132,0.338-0.281,0.678-0.412,1.014l-0.029,0.057l-0.01,0.031L1.78,27.527L1.77,27.555l-0.008,0.02c-0.419,0.955-0.746,1.848-1.034,2.859L0.72,30.473l-0.012,0.029c-0.316,1.076-0.611,2.275-0.687,3.395l-0.01,0.135L0,34.301v0.447h0.012v0.172h0.01v0.184h0.008v0.104H0.04v0.098h0.009v0.105h0.009v0.104h0.011v0.049h0.009v0.057h0.01v0.105h0.01v0.059h0.008v0.055h0.012v0.105h0.01v0.059h0.008v0.057h0.012v0.115h0.008v0.057h0.012v0.059h0.008v0.047h0.01v0.059h0.01v0.057h0.01v0.057h0.009v0.059h0.011v0.057h0.008v0.115h0.01v0.047H0.25v0.059h0.01v0.047h0.011v0.059h0.008v0.057h0.01v0.059h0.01v0.045h0.01v0.059h0.01v0.049h0.008v0.057h0.01v0.049h0.01v0.047h0.01v0.049h0.01v0.047h0.009v0.049h0.01v0.047h0.011v0.096h0.008v0.039h0.012v0.047h0.008v0.039h0.01v0.047h0.011v0.076H0.45v0.039h0.01v0.037h0.01v0.076h0.01v0.029H0.49v0.029h0.008v0.068h0.011v0.055h0.008v0.051h0.01v0.037h0.01v0.039h0.01v0.037h0.01v0.037h0.01v0.029h0.01v0.039h0.01v0.066h0.009v0.027h0.011v0.031h0.009v0.055h0.009v0.051h0.012v0.047h0.008v0.037h0.01v0.049h0.01v0.018H0.67v0.021h0.01v0.047h0.01v0.049H0.7v0.037h0.008v0.049H0.72v0.027h0.008v0.029h0.01v0.057h0.01v0.029h0.01v0.027h0.01v0.039h0.01v0.047h0.01v0.041h0.01v0.037h0.008v0.02h0.01v0.02h0.01v0.037h0.01v0.049h0.01v0.037h0.01v0.039H0.86v0.047h0.01v0.02h0.011v0.02h0.01v0.049h0.009v0.018h0.01v0.018H0.92v0.049h0.009v0.021h0.01v0.027h0.01v0.049h0.008v0.018h0.012v0.029h0.008v0.027h0.012v0.029h0.009v0.02h0.009v0.029h0.011v0.029h0.009v0.027h0.01v0.029h0.01v0.037h0.009v0.029h0.011v0.029h0.008v0.029h0.01v0.037h0.012v0.02h0.006v0.02h0.011v0.029h0.009v0.029H1.13v0.037h0.01v0.02h0.008v0.029h0.012v0.027h0.009v0.02h0.009v0.02h0.011v0.02h0.009v0.018h0.01v0.027h0.01v0.029h0.01v0.029h0.01v0.02h0.01v0.021h0.01v0.018h0.009v0.029h0.009v0.016h0.012v0.031h0.008v0.02h0.01V40.9h0.01v0.018H1.32v0.027h0.011v0.021h0.01v0.027h0.008v0.02h0.011v0.02h0.009v0.018h0.01v0.021h0.01V41.1h0.01v0.018h0.01v0.031h0.01v0.018h0.008v0.031h0.012v0.018h0.008v0.018h0.01v0.021h0.01v0.02h0.011v0.027h0.009v0.018h0.01v0.021h0.01v0.018h0.01v0.02h0.01v0.029h0.01v0.02H1.54v0.018h0.01v0.02h0.011v0.02h0.009v0.029h0.01v0.018H1.59v0.018h0.009v0.021h0.009v0.02h0.009v0.027h0.011l0.01,0.01v0.021h0.009v0.018h0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.021h0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.027h0.01v0.02h0.01v0.021h0.008v0.018h0.011v0.02H1.77v0.027H1.78v0.02h0.008v0.018h0.01v0.02H1.81v0.02h0.009v0.029h0.009v0.02h0.011v0.018h0.009v0.02h0.01v0.02h0.01v0.029h0.01v0.018h0.009v0.021h0.011v0.02h0.01v0.018h0.01v0.02h0.008l0.01,0.008v0.02h0.01v0.02h0.01l0.01,0.012v0.018h0.01v0.02h0.01v0.02h0.01v0.027H2v0.02h0.011v0.029h0.008l0.01,0.008v0.02h0.011v0.02h0.009v0.02h0.01v0.02h0.01l0.008,0.01v0.02h0.012v0.018h0.008v0.02h0.01v0.02h0.01v0.02h0.01v0.02h0.009v0.018h0.011v0.031h0.01v0.018h0.01v0.018h0.01v0.02h0.01v0.02h0.01l0.009,0.01v0.02h0.01v0.02H2.22v0.02h0.01l0.01,0.01v0.018h0.009v0.02h0.011v0.018h0.01l0.008,0.01v0.021h0.012v0.018h0.008v0.02h0.01v0.02h0.01v0.02h0.009v0.02h0.011l0.01,0.008v0.02h0.01v0.018h0.009l0.01,0.012v0.02h0.011l0.008,0.01v0.018h0.01v0.02h0.01v0.029h0.008l0.012,0.01v0.02h0.009v0.018H2.45l0.01,0.01v0.02h0.008v0.02h0.012v0.02h0.009v0.018h0.009l0.02,0.02v0.018h0.011v0.021h0.009v0.018h0.008l0.02,0.02v0.021h0.01v0.018h0.01v0.02h0.01v0.02h0.01V43.5h0.01l0.02,0.02v0.021H2.64v0.018h0.012v0.018h0.008l0.02,0.02v0.02h0.01v0.02H2.7v0.02h0.008l0.021,0.018v0.02h0.007l0.021,0.02v0.02h0.009l0.02,0.018v0.021h0.01l0.01,0.006v0.021h0.01v0.02h0.009l0.011,0.01v0.018h0.009v0.021h0.009l0.028,0.027v0.02h0.009l0.012,0.01v0.018h0.009v0.02h0.01v0.021h0.011l0.009,0.008v0.02h0.011l0.008,0.008v0.021h0.01l0.039,0.037v0.02h0.01l0.009,0.01v0.018h0.009l0.01,0.012v0.02h0.01l0.02,0.018v0.02h0.01l0.01,0.01v0.016h0.008l0.039,0.041v0.02h0.011l0.019,0.02v0.018h0.01l0.01,0.01v0.02h0.01l0.018,0.02v0.02h0.011l0.009,0.01v0.02h0.01l0.02,0.02v0.018h0.01l0.009,0.01v0.018h0.011l0.076,0.078v0.02h0.009l0.01,0.01v0.02h0.01l0.019,0.018v0.02h0.01l0.01,0.01v0.018h0.01l0.048,0.049v0.02h0.011l0.018,0.02v0.018h0.01l0.01,0.012v0.02h0.008l0.078,0.076v0.02h0.009l0.011,0.008v0.021h0.01l0.048,0.047v0.018h0.009l0.02,0.02v0.02H3.74l0.011,0.01v0.02h0.008l0.04,0.039v0.016h0.009l0.048,0.049v0.02h0.009l0.039,0.039v0.018h0.01l0.039,0.039v0.02H3.96l0.012,0.01v0.018h0.008l0.011,0.01v0.02H4l0.065,0.068v0.018h0.01l0.028,0.029v0.02h0.011l0.029,0.029v0.018h0.008L4.2,45.584v0.02h0.01v0.02h0.01l0.066,0.068v0.02h0.01l0.018,0.02v0.018h0.01l0.029,0.027v0.02h0.01l0.049,0.049v0.02h0.01v0.02h0.008l0.068,0.064v0.021h0.01l0.066,0.066v0.02h0.01l0.029,0.027v0.02H4.62l0.029,0.029v0.02h0.019l0.067,0.066v0.02h0.011l0.132,0.135v0.02h0.01l0.316,0.312l0.02,0.012c0.514,0.457,1.074,0.895,1.635,1.291l0.012,0.01l0.017,0.008l0.011,0.01c0.176,0.125,0.364,0.244,0.535,0.375l0.038,0.02l0.011,0.008c0.271,0.178,0.56,0.361,0.84,0.525l0.011,0.01l0.058,0.031l0.009,0.008l0.059,0.029l0.008,0.01c0.845,0.479,1.798,0.9,2.728,1.213l0.115,0.039l0.037,0.021c1.543,0.521,3.045,0.877,4.697,0.945l0.717,0.029l0.506,0.01l1.502,0.01v-0.01l0.451-0.01l0.344-0.01l0.268-0.01c2.569-0.096,5.609-0.672,8.092-0.25l0.201,0.029l0.057,0.02l0.068,0.01c0.312,0.062,0.652,0.139,0.955,0.238l0.049,0.01l0.037,0.018c0.23,0.07,0.541,0.186,0.756,0.289l0.038,0.008l0.076,0.041l0.04,0.008l0.114,0.059l0.028,0.008c0.617,0.258,1.242,0.602,1.826,0.918l0.01,0.01l0.029,0.01c0.358,0.197,0.67,0.385,0.975,0.652l0.021,0.008l0.296,0.299v0.018h0.011l0.036,0.039v0.018h0.011l0.037,0.039v0.018h0.012l0.076,0.076v0.021h0.009l0.01,0.008v0.02h0.01l0.02,0.02v0.02h0.01l0.02,0.02v0.018h0.008l0.02,0.02v0.02h0.01l0.02,0.02v0.018h0.008l0.02,0.02v0.02h0.011l0.019,0.02v0.02h0.01l0.02,0.02v0.018h0.008l0.02,0.02v0.02h0.01l0.02,0.02v0.018h0.01l0.02,0.02v0.02h0.009l0.011,0.01v0.02h0.01l0.009,0.01v0.018h0.011l0.01,0.008v0.021h0.008l0.029,0.029v0.02h0.01l0.019,0.018v0.02h0.01l0.028,0.029v0.02h0.01l0.02,0.02v0.02h0.008l0.021,0.018v0.02h0.009l0.019,0.021v0.016h0.01l0.028,0.031v0.016h0.011l0.018,0.021v0.018h0.01l0.059,0.059v0.02h0.008l0.02,0.02v0.018h0.01l0.02,0.02v0.02h0.01l0.057,0.059v0.018h0.01l0.06,0.059v0.02h0.007l0.049,0.047v0.018h0.011c0.107,0.094,0.308,0.297,0.439,0.328l0.182,0.008V55.42l0.028-0.012l0.039-0.018l0.029-0.012l0.037-0.02l0.028-0.01l0.058-0.027l0.01-0.01c0.098-0.045,0.174-0.133,0.219-0.229l0.02-0.02l0.01-0.02l0.01-0.01l0.02-0.037l0.047-0.049l0.012-0.018l0.009-0.012l0.009-0.018l0.01-0.01l0.01-0.02l0.009-0.01l0.009-0.02l0.088-0.086l0.01-0.02l0.037-0.037l0.01-0.021l0.162-0.16l0.01-0.02l0.535-0.535l0.021-0.01l0.056-0.059l0.02-0.008c0.111-0.1,0.217-0.195,0.326-0.299l0.018-0.01l0.01-0.01l0.02-0.006l0.02-0.021l0.02-0.008c0.135-0.117,0.244-0.207,0.392-0.307l0.028-0.029l0.02-0.01l0.011-0.01l0.019-0.008l0.011-0.012l0.018-0.008l0.028-0.031l0.02-0.008l0.029-0.029l0.076-0.037l0.028-0.029l0.02-0.01c0.073-0.053,0.183-0.135,0.268-0.172l0.01-0.01l0.019-0.01l0.01-0.01l0.02-0.01l0.01-0.01l0.02-0.006l0.01-0.012l0.018-0.01c0.053-0.045,0.119-0.066,0.172-0.107l0.058-0.027l0.011-0.01c0.107-0.074,0.146-0.084,0.267-0.143l0.011-0.012l0.02-0.008l0.01-0.01c0.283-0.148,0.566-0.285,0.859-0.42l0.029-0.01l0.135-0.066l0.057-0.02l0.096-0.049c0.219-0.082,0.439-0.186,0.66-0.258l0.028-0.008l0.059-0.029c0.353-0.109,0.7-0.232,1.06-0.316l0.021-0.01l0.035-0.01l0.098-0.02l0.039-0.008l0.094-0.021l0.058-0.01l0.028-0.01l0.02-0.008c0.983-0.23,1.754-0.197,2.784-0.23l0.392-0.01l0.432-0.01l0.449-0.01c1.681-0.039,3.368-0.047,5.049-0.074l0.975-0.012l0.93-0.008c1.099-0.041,2.205,0.029,3.3-0.076l0.124-0.012l0.038-0.008l0.095-0.01l0.049-0.012c0.965-0.146,2.104-0.514,3.002-0.859l0.039-0.02l0.059-0.018l0.02-0.01l0.027-0.01l0.039-0.02l0.029-0.01c0.099-0.051,0.209-0.076,0.305-0.135l0.01-0.008l0.029-0.012c0.1-0.051,0.209-0.074,0.306-0.133l0.011-0.01l0.029-0.01l0.038-0.018c0.246-0.104,0.476-0.236,0.716-0.354l0.01-0.012l0.029-0.008l0.096-0.049l0.009-0.008c0.172-0.094,0.335-0.195,0.507-0.289l0.01-0.01l0.059-0.029l0.008-0.008c0.064-0.041,0.119-0.08,0.191-0.115l0.01-0.008l0.02-0.012c0.061-0.053,0.135-0.082,0.201-0.123l0.01-0.01l0.019-0.01l0.019-0.02l0.059-0.029l0.01-0.01l0.019-0.008l0.038-0.039l0.057-0.029l0.01-0.01l0.02-0.01l0.009-0.01c0.135-0.098,0.286-0.176,0.411-0.285l0.02-0.01l0.01-0.01l0.02-0.01c0.038-0.029,0.104-0.066,0.135-0.105l0.018-0.01l0.012-0.01c0.05-0.023,0.082-0.07,0.133-0.096l0.01-0.01l0.019-0.01l0.038-0.037l0.02-0.01c0.301-0.227,0.643-0.475,0.918-0.729l0.02-0.008l0.009-0.01l0.021-0.01c0.902-0.768,1.599-1.668,2.294-2.6l0.01-0.021l0.028-0.031l0.01-0.016l0.048-0.047l0.021-0.041c0.24-0.318,0.473-0.643,0.67-0.994l0.018-0.018l0.01-0.02l0.01-0.012l0.048-0.094l0.009-0.01l0.067-0.133l0.02-0.02l0.009-0.02l0.01-0.01l0.086-0.172l0.011-0.01l0.029-0.059l0.007-0.008c0.096-0.166,0.182-0.342,0.26-0.518l0.01-0.01l0.037-0.076l0.02-0.059c0.156-0.318,0.297-0.646,0.431-0.973l0.019-0.061l0.01-0.02l0.02-0.057l0.02-0.037c0.504-1.441,1.078-3.117,1.188-4.641l0.008-0.189l0.01-0.201l0.01-0.307l0.008-1.061h-0.008v-0.316h-0.01v-0.201h-0.01v-0.199h-0.008V33.41H70.14v-0.086h-0.009v-0.096h-0.009v-0.182h-0.011v-0.078h-0.009v-0.086h-0.01v-0.076h-0.01V32.73h-0.01v-0.076h-0.01v-0.076h-0.01v-0.066h-0.01v-0.078h-0.008v-0.037h-0.01v-0.029h-0.011v-0.066h-0.009v-0.068h-0.01v-0.066h-0.01V32.1h-0.01v-0.059h-0.01v-0.057h-0.01v-0.057h-0.01v-0.068h-0.01v-0.049H69.93v-0.057h-0.011v-0.029H69.91v-0.027H69.9V31.65h-0.009v-0.059h-0.008v-0.049h-0.011v-0.047h-0.009v-0.047h-0.01v-0.047h-0.01v-0.049h-0.01v-0.051h-0.011v-0.045h-0.009v-0.039h-0.01v-0.047h-0.01v-0.039h-0.01v-0.049h-0.01v-0.037h-0.01V31.01h-0.009V30.98h-0.009v-0.02h-0.011v-0.037h-0.011v-0.039h-0.009v-0.041H69.71v-0.035H69.7V30.77h-0.01v-0.037h-0.01v-0.041h-0.01v-0.035h-0.009v-0.029h-0.011v-0.039h-0.008v-0.039h-0.01v-0.035h-0.01v-0.041h-0.01v-0.029h-0.01v-0.057h-0.01v-0.029h-0.01V30.34h-0.01v-0.047h-0.008v-0.031h-0.012v-0.02h-0.008v-0.047h-0.01v-0.037h-0.01v-0.039h-0.01V30.08h-0.01v-0.018h-0.008v-0.02h-0.012v-0.039h-0.01v-0.039h-0.009v-0.02H69.46v-0.018h-0.009v-0.047h-0.01v-0.029h-0.009v-0.018h-0.01v-0.031h-0.011v-0.02h-0.009v-0.027h-0.009v-0.029h-0.011v-0.039h-0.008V29.66h-0.012v-0.037h-0.008v-0.031h-0.01v-0.027h-0.01v-0.029h-0.01v-0.018h-0.01v-0.029H69.31v-0.029h-0.011V29.43h-0.011v-0.027H69.28v-0.029h-0.01v-0.029H69.26v-0.02h-0.009v-0.029H69.24v-0.027h-0.009V29.24h-0.01v-0.02h-0.01v-0.029h-0.009v-0.02h-0.011v-0.027h-0.009v-0.02h-0.009v-0.02h-0.011v-0.031h-0.009v-0.025h-0.01V29.02h-0.01V28.99h-0.01v-0.02h-0.01v-0.029h-0.01v-0.027h-0.008v-0.029h-0.012v-0.029h-0.008v-0.018h-0.01v-0.029h-0.01v-0.02h-0.009v-0.02H69.04v-0.027h-0.009v-0.02h-0.011v-0.02h-0.01v-0.029h-0.008v-0.018h-0.01v-0.029h-0.01v-0.02h-0.01v-0.029h-0.01v-0.018h-0.01v-0.039h-0.01v-0.027h-0.01v-0.029h-0.01v-0.029h-0.01v-0.029h-0.008v-0.027h-0.011v-0.021h-0.009V28.33h-0.01v-0.018h-0.01v-0.029h-0.009v-0.02h-0.01v-0.029h-0.011v-0.018h-0.008v-0.031H68.82v-0.018H68.81v-0.029h-0.009v-0.018h-0.009V28.09h-0.009v-0.025h-0.012v-0.021h-0.007v-0.029h-0.012v-0.029h-0.009v-0.018h-0.009v-0.027h-0.012v-0.02h-0.008v-0.029h-0.01v-0.02h-0.012v-0.027h-0.008v-0.021h-0.01v-0.029h-0.01v-0.016h-0.01v-0.031h-0.01v-0.018H68.64v-0.029h-0.011v-0.018h-0.01V27.65h-0.01v-0.018h-0.009v-0.02h-0.01v-0.029h-0.01v-0.018h-0.009v-0.021h-0.01v-0.027h-0.01v-0.029h-0.009v-0.027h-0.01V27.43h-0.01v-0.018h-0.01v-0.029h-0.011v-0.029h-0.009v-0.018h-0.01v-0.031h-0.01v-0.016h-0.01V27.26h-0.01v-0.02h-0.01v-0.029h-0.008v-0.018h-0.01v-0.02h-0.01v-0.029h-0.01v-0.02h-0.01v-0.027h-0.01v-0.02h-0.009v-0.029h-0.01v-0.02H68.36v-0.027h-0.008v-0.02h-0.012v-0.029h-0.008v-0.029h-0.01v-0.029h-0.011v-0.029h-0.009v-0.018h-0.008v-0.02h-0.01v-0.037h-0.01v-0.029h-0.011v-0.029h-0.01v-0.02h-0.009v-0.018h-0.01v-0.037h-0.01v-0.031h-0.01V26.6h-0.01V26.57h-0.01v-0.029h-0.01v-0.027H68.18v-0.029h-0.011v-0.02H68.16v-0.029h-0.01v-0.027H68.14v-0.029h-0.007v-0.02h-0.011v-0.027h-0.01v-0.02h-0.009v-0.027h-0.011v-0.02h-0.008v-0.039h-0.012v-0.029h-0.008v-0.02h-0.01v-0.037h-0.01v-0.049h-0.01v-0.02h-0.01v-0.018h-0.01v-0.039h-0.01v-0.049h-0.01v-0.018h-0.009v-0.02h-0.011v-0.037h-0.009v-0.049H67.96v-0.02h-0.012v-0.018H67.94v-0.059h-0.01v-0.029h-0.01v-0.027h-0.009v-0.049h-0.011v-0.027h-0.009v-0.021h-0.01v-0.037h-0.011V25.51h-0.008v-0.039h-0.01v-0.02h-0.01v-0.02h-0.01v-0.045h-0.01v-0.049h-0.01v-0.041h-0.008v-0.055h-0.012v-0.029h-0.008v-0.029h-0.01v-0.059h-0.01v-0.039h-0.01v-0.027h-0.01v-0.037h-0.01v-0.029h-0.01v-0.039h-0.01v-0.047h-0.009v-0.039H67.7V24.82h-0.009v-0.057h-0.009v-0.029h-0.012v-0.027h-0.008v-0.059h-0.01v-0.029h-0.011v-0.027h-0.007v-0.068h-0.011v-0.037h-0.009v-0.031h-0.01v-0.074h-0.011v-0.039h-0.009v-0.029h-0.011v-0.035h-0.009v-0.039h-0.01v-0.041h-0.01v-0.039h-0.009v-0.076h-0.011v-0.047h-0.008v-0.037h-0.012v-0.039h-0.01v-0.037h-0.008v-0.049H67.48v-0.037h-0.009v-0.078h-0.01v-0.049h-0.01v-0.037h-0.01v-0.047h-0.008v-0.039h-0.012v-0.047h-0.008v-0.037h-0.01v-0.088h-0.01v-0.049h-0.01v-0.037h-0.01v-0.086h-0.01v-0.049h-0.01v-0.037h-0.01v-0.049h-0.01V23.07h-0.01v-0.086h-0.008v-0.088h-0.01V22.85H67.3v-0.037h-0.01v-0.078h-0.01v-0.086h-0.008v-0.076h-0.012v-0.076h-0.01V22.42h-0.008v-0.078h-0.012v-0.074h-0.009v-0.078h-0.01v-0.152h-0.009v-0.152h-0.01v-0.164h-0.01v-0.229h-0.01v-0.805l0.01-0.229c0.105-1.641,0.555-3.777,1.196-5.307l0.019-0.059l0.02-0.039c0.467-1.201,1.154-2.291,1.779-3.404l0.008-0.01l0.059-0.117l-5.748-5.746h-0.01v-0.02L58.749,0\"/></svg>"};
var interstateshield1={"name":"interstateshield1","width":60.924,"height":60.946,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"60.924\" height=\"60.946\"><path fill=\"none\" d=\"M30.463,60.946L30.43,60.94C12.797,57.36,0,41.686,0,23.668C0,15.025,2.832,6.873,8.187,0.092L8.259,0l0.112,0.035c3.559,1.088,7.266,1.641,11.02,1.641c3.764,0,7.474-0.553,11.024-1.641l0.05-0.016l0.051,0.016c3.554,1.088,7.264,1.641,11.025,1.641c3.754,0,7.459-0.551,11.012-1.637l0.112-0.035l0.072,0.094c5.355,6.77,8.187,14.922,8.187,23.57c0,18.018-12.796,33.692-30.427,37.272L30.463,60.946z\"/><path fill=\"#EC1C24\" d=\"M52.299,1.455C48.944,2.48,44.76,3.033,41.069,3.033c-3.692,0-7.257-0.549-10.612-1.578C27.1,2.482,23.53,3.033,19.843,3.033c-3.69,0-7.848-0.551-11.204-1.578C6.089,4.68,4.235,8.691,3.045,12.816h54.83C56.695,8.688,54.852,4.68,52.299,1.455\"/><path fill=\"#0054A5\" d=\"M58.222,14.076H2.713c-0.857,3.381-1.278,6.789-1.278,9.875c0,17.127,12.467,32.198,29.026,35.557c16.561-3.359,29.029-18.43,29.029-35.557C59.49,20.865,59.074,17.457,58.222,14.076\"/></svg>"};
var interstateshield2={"name":"interstateshield2","width":76.18,"height":60.95,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"76.18\" height=\"60.95\"><path fill=\"none\" d=\"M3.965,0c5.512,1.631,11.258,2.459,17.059,2.459S32.568,1.631,38.081,0.01L38.09,0c5.512,1.631,11.256,2.459,17.058,2.459c5.8,0,11.545-0.828,17.058-2.449l-0.01,0.01c2.626,5.652,3.984,11.816,3.984,18.072c0,21.881-16.377,40.297-38.099,42.858C16.357,58.389,0,39.973,0,18.092C0,11.836,1.35,5.672,3.965,0.02\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#EC1C24\" d=\"M38.081,1.305l-0.028,0.008C32.588,2.865,26.98,3.67,21.293,3.697l-0.716,0.01v-0.01l-0.783-0.01c-5.089-0.09-10.2-0.801-15.112-2.141H4.664l-0.02,0.037C3.146,5.088,2.113,8.809,1.629,12.598v0.121H74.57v-0.027h-0.01v-0.066h-0.01v-0.064h-0.008v-0.064h-0.01v-0.074h-0.011v-0.064h-0.009v-0.066h-0.01v-0.066h-0.01V12.16h-0.008v-0.064h-0.01v-0.064h-0.01v-0.064h-0.009v-0.076h-0.009v-0.064h-0.01V11.76h-0.01v-0.064h-0.01v-0.055h-0.008v-0.057h-0.01v-0.055h-0.01v-0.057h-0.01v-0.057h-0.009v-0.055h-0.009v-0.057h-0.01v-0.057h-0.008v-0.055h-0.011v-0.057h-0.009v-0.055h-0.01v-0.057h-0.01v-0.055H74.3v-0.059h-0.01v-0.055h-0.009v-0.055h-0.01v-0.057h-0.009v-0.057h-0.011v-0.055h-0.008v-0.047h-0.01v-0.047h-0.01v-0.047h-0.008v-0.057h-0.01v-0.045h-0.011v-0.047h-0.009v-0.045h-0.01v-0.049h-0.009v-0.057H74.16V10.15h-0.009v-0.047h-0.01v-0.047h-0.009V10.01h-0.01V9.953h-0.01V9.908h-0.01V9.861h-0.009V9.814h-0.009V9.768h-0.01V9.713h-0.01V9.664h-0.01V9.619h-0.008V9.582H74.04V9.533h-0.011V9.5h-0.008V9.451h-0.01V9.406h-0.011V9.367h-0.009V9.322h-0.01V9.285h-0.009V9.238h-0.009V9.189h-0.01V9.154h-0.01V9.107h-0.008V9.068h-0.01V9.023h-0.01V8.986h-0.01V8.939h-0.009V8.893h-0.01V8.855h-0.009V8.809h-0.009V8.771h-0.011V8.725h-0.009V8.678h-0.01V8.641h-0.008V8.605h-0.009V8.568h-0.011V8.529h-0.009V8.482h-0.01V8.445h-0.01V8.41h-0.009V8.371H73.77V8.334h-0.01V8.299h-0.01V8.26h-0.009V8.221H73.73V8.186h-0.008V8.148h-0.01V8.102h-0.008V8.064h-0.01V8.025h-0.01V7.988h-0.01V7.953h-0.01V7.916h-0.01V7.877h-0.008V7.842h-0.01V7.803h-0.01V7.766H73.62V7.721h-0.009V7.682h-0.01V7.646h-0.01V7.607h-0.009V7.58h-0.009V7.543h-0.01V7.506h-0.01V7.477h-0.009V7.439h-0.01V7.404h-0.011V7.365h-0.008V7.338h-0.01V7.301H73.5V7.264h-0.01V7.236h-0.01V7.199h-0.01V7.16h-0.01V7.135h-0.009V7.096h-0.009V7.059h-0.01V7.021h-0.01V6.994h-0.01V6.957h-0.008V6.918h-0.01V6.891h-0.01V6.854h-0.008V6.816h-0.01V6.791h-0.01V6.75h-0.01V6.713h-0.01V6.676h-0.01V6.648h-0.008V6.611h-0.01V6.584h-0.009V6.557h-0.009V6.518h-0.011V6.49h-0.009V6.453h-0.008V6.424h-0.012V6.398h-0.008V6.359h-0.01V6.332h-0.01V6.305H73.22V6.268h-0.009V6.238h-0.01V6.211h-0.01V6.174h-0.009V6.146h-0.01V6.117h-0.009V6.08h-0.01V6.053h-0.01V6.016h-0.009V5.986h-0.01V5.961h-0.009V5.924h-0.008V5.895h-0.011V5.867H73.09V5.83h-0.01V5.801h-0.01V5.773h-0.01V5.738h-0.01V5.707h-0.008V5.682h-0.01V5.643h-0.01V5.615h-0.009V5.586h-0.009V5.561h-0.01V5.531h-0.01V5.502h-0.008V5.475h-0.01V5.447h-0.01V5.41h-0.01V5.383h-0.01V5.354h-0.008V5.326h-0.01V5.299h-0.01V5.271h-0.009V5.244h-0.009V5.215h-0.01V5.186h-0.01V5.16h-0.01V5.131h-0.01V5.104h-0.008V5.076h-0.01V5.039h-0.01V5.012h-0.01V4.982H72.81V4.955h-0.011V4.926h-0.007V4.898h-0.01V4.869h-0.009V4.844h-0.01V4.814h-0.01V4.787h-0.01V4.76h-0.009V4.732h-0.01V4.693h-0.009V4.664h-0.009V4.646h-0.011V4.619h-0.009V4.592H72.68V4.564h-0.01V4.535h-0.01V4.508h-0.008V4.479h-0.01V4.461h-0.011V4.432h-0.009V4.406h-0.01V4.377h-0.008V4.348h-0.01V4.32h-0.01V4.303h-0.008V4.275h-0.009V4.246h-0.011V4.219h-0.01V4.189H72.54V4.162h-0.01V4.145h-0.009V4.117h-0.01V4.09h-0.009V4.061h-0.011V4.033h-0.008V4.004h-0.01V3.986h-0.009V3.961h-0.009V3.93h-0.01V3.902h-0.01V3.873h-0.01V3.846h-0.01V3.816h-0.009V3.799H72.4V3.771h-0.01V3.742h-0.008V3.717h-0.01V3.688h-0.009V3.67h-0.011V3.643h-0.009V3.613h-0.009v-0.02h-0.011V3.568h-0.009V3.547h-0.01V3.52h-0.008V3.492h-0.012V3.475h-0.008V3.447h-0.01V3.418h-0.009V3.4h-0.009V3.371h-0.01V3.344h-0.01v-0.02h-0.01V3.295h-0.009V3.277h-0.009V3.25h-0.01V3.223h-0.01v-0.02h-0.009V3.178h-0.009V3.146h-0.01V3.129h-0.009V3.102h-0.009v-0.02h-0.01V3.057h-0.01V3.027h-0.01V3.01h-0.01V2.979h-0.01V2.953h-0.009v-0.02h-0.009V2.906h-0.01v-0.02h-0.009V2.859h-0.009V2.83h-0.009V2.812h-0.011V2.785h-0.01V2.756H72.01V2.738h-0.011V2.711H71.99v-0.02h-0.01V2.664h-0.01v-0.02h-0.009V2.627h-0.009V2.6h-0.01V2.58h-0.008V2.551h-0.01V2.533h-0.01V2.508h-0.009V2.486h-0.009V2.459h-0.012v-0.02h-0.008V2.41h-0.01V2.395h-0.01V2.377h-0.008V2.348h-0.01V2.33h-0.01V2.301h-0.01V2.283h-0.008V2.254h-0.01V2.236h-0.01V2.207h-0.009V2.189h-0.01V2.172h-0.011V2.141h-0.008V2.125h-0.01V2.096h-0.009v-0.02h-0.01V2.049h-0.009V2.031h-0.01V2.004h-0.009v-0.02h-0.01v-0.02h-0.009V1.938h-0.01v-0.02h-0.01V1.893h-0.01v-0.02h-0.008V1.844h-0.009V1.826h-0.011V1.799h-0.01v-0.02h-0.008V1.76H71.6V1.742h-0.01V1.725h-0.008v-0.02H71.57v-0.02h-0.009V1.668h-0.009v-0.02h-0.01V1.631h-0.008v-0.02h-0.01V1.594h-0.01v-0.02h-0.009V1.557h-0.028c-5.168,1.398-10.52,2.115-15.875,2.141l-0.717,0.01v-0.01l-0.781-0.01c-5.379-0.092-10.676-0.879-15.85-2.336l-0.139-0.047\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#0054A5\" d=\"M1.564,13.891l0.008,0.012L1.564,13.93c-0.127,1.297-0.189,2.602-0.197,3.9v0.355h0.01v0.727h0.01v0.361h0.01v0.242h0.009v0.254h0.009v0.24h0.01v0.205h0.01v0.148h0.009v0.148h0.009v0.15h0.01v0.15h0.01v0.146h0.009V21.1h0.009v0.148h0.01v0.102h0.01v0.104h0.008v0.1h0.01v0.115h0.01v0.104h0.01v0.102h0.01v0.102h0.01v0.111h0.008v0.102h0.01v0.104h0.01v0.084h0.01v0.084H1.61v0.074h0.009v0.084h0.01v0.084h0.008v0.084h0.01v0.084h0.01v0.074h0.01v0.082h0.01v0.084h0.008v0.086h0.01v0.074h0.01v0.082h0.01v0.066h0.01v0.064h0.009v0.066H1.74v0.064h0.009v0.074H1.76v0.066h0.008v0.064h0.01v0.066h0.01v0.062h0.01v0.066h0.009v0.064h0.009v0.066h0.01v0.074h0.009v0.064h0.009v0.066h0.01v0.064h0.01v0.057h0.01v0.055h0.01v0.055h0.01v0.059h0.008v0.055h0.01v0.057h0.008v0.055h0.01v0.057h0.01v0.055h0.01v0.057h0.009v0.055h0.009v0.059h0.01v0.055h0.01v0.055h0.01v0.057h0.01v0.057h0.009v0.055H2.02v0.066h0.009v0.045h0.011v0.047h0.008v0.045h0.009v0.049h0.011v0.055h0.01v0.049h0.008v0.045h0.011v0.047h0.009v0.045h0.01v0.057h0.01v0.047h0.008v0.047h0.01v0.047h0.009V26.1H2.16v0.055h0.008v0.047h0.01v0.047h0.01v0.047h0.01v0.047h0.01v0.055h0.008v0.047h0.011v0.047h0.009v0.037h0.008v0.047h0.011v0.037h0.009v0.047h0.01v0.047h0.008v0.037h0.01v0.045h0.01v0.039h0.01v0.047h0.009v0.045h0.011v0.037h0.01v0.047h0.008v0.037h0.009v0.047h0.009v0.037h0.01v0.047h0.01v0.047h0.01v0.037h0.01v0.047H2.41v0.037h0.01v0.047h0.01v0.045h0.009v0.039h0.01v0.037h0.009v0.037h0.009v0.037h0.01v0.045h0.009v0.039h0.01v0.035h0.01v0.039h0.01v0.037h0.009v0.037h0.01v0.037h0.01v0.039h0.009v0.035h0.01v0.037h0.008v0.047h0.009v0.037h0.011v0.037h0.008v0.037h0.011v0.037h0.009v0.039h0.01v0.037h0.01v0.035h0.008v0.039h0.012v0.037h0.008v0.047h0.01v0.038h0.009v0.035h0.009V28.5h0.01v0.029h0.009v0.035h0.01v0.039h0.011v0.027h0.008v0.037h0.01v0.039h0.01v0.037h0.01v0.029h0.008v0.035h0.01v0.037h0.01v0.027h0.008v0.039h0.01v0.037h0.01v0.027h0.01v0.037h0.009v0.039h0.01v0.035h0.009v0.027h0.01v0.037h0.01v0.037h0.008v0.029h0.01v0.037h0.01v0.035h0.009v0.029h0.011v0.037h0.009v0.037h0.009v0.039h0.01v0.027h0.01v0.037h0.008v0.027h0.01v0.027h0.01v0.037h0.01v0.029h0.008v0.037h0.01v0.027h0.01v0.029h0.009v0.035h0.011v0.031h0.008v0.025h0.01v0.039h0.009v0.027h0.01v0.027H3.09v0.037H3.1v0.027h0.009v0.027h0.01v0.037h0.011v0.029h0.008v0.037h0.01v0.027h0.009v0.027h0.009v0.039h0.01v0.027h0.01v0.027h0.01v0.039h0.009v0.027h0.009v0.027h0.01v0.037h0.01v0.027h0.01v0.029h0.008v0.035h0.011v0.029h0.009v0.027h0.009v0.029h0.009v0.027h0.01v0.027h0.009v0.027h0.011v0.029h0.009V30.7h0.009v0.027h0.01v0.027h0.01v0.029H3.36v0.027h0.009v0.029h0.01v0.025h0.01v0.029h0.009v0.027h0.009v0.029h0.01v0.027h0.01v0.029h0.009v0.025h0.01v0.037h0.011V31.1h0.009v0.027h0.009v0.029h0.009v0.025h0.01v0.029h0.008v0.027H3.51v0.027h0.009v0.029h0.01v0.029h0.009v0.025h0.01v0.029h0.01v0.037h0.009v0.029h0.011v0.016h0.008v0.029h0.01v0.027h0.008v0.029h0.01v0.027H3.62v0.027h0.011v0.027h0.008v0.02h0.01v0.029h0.011v0.025h0.009v0.029h0.01v0.029h0.009v0.025h0.009v0.02h0.01v0.027h0.009v0.029h0.01v0.027h0.009v0.027h0.01v0.029h0.009v0.018h0.01v0.029H3.77v0.027h0.01v0.027h0.01v0.029h0.01v0.025h0.008v0.02h0.01v0.027h0.01v0.029h0.01v0.027h0.009v0.027h0.009v0.029h0.01v0.027h0.01v0.02h0.009v0.027h0.01v0.027H3.9v0.029h0.01v0.027h0.008v0.018h0.01v0.027h0.01v0.029h0.009v0.018h0.009v0.029h0.01v0.02h0.01v0.027h0.01v0.027h0.01v0.018h0.01v0.027h0.008v0.027h0.01v0.02h0.008v0.029H4.04v0.027h0.009v0.02h0.01v0.027h0.01v0.018h0.009v0.029h0.009v0.027h0.01v0.02h0.01v0.027h0.009v0.027h0.009v0.02h0.01v0.029h0.009v0.018H4.15v0.027h0.01v0.027h0.01v0.02h0.01v0.027h0.01v0.027h0.01v0.02h0.009v0.027h0.009v0.02h0.01v0.027h0.01v0.027h0.01v0.02h0.008v0.027h0.01v0.027h0.01v0.02h0.008v0.027h0.011v0.02h0.009v0.027h0.01v0.018h0.01v0.02h0.008v0.029h0.01v0.018h0.009v0.027h0.011v0.02h0.009v0.027h0.009v0.02h0.01v0.027h0.01v0.018h0.01v0.029h0.008v0.02h0.01v0.018h0.01v0.027h0.008v0.02h0.01v0.027h0.01v0.018h0.01v0.029h0.008v0.018h0.01v0.029h0.01v0.018h0.01v0.02h0.01v0.027h0.008v0.02h0.01v0.027h0.01v0.018h0.008v0.029h0.011v0.018h0.01v0.029H4.58v0.02h0.01v0.018h0.009v0.027h0.009v0.018h0.01v0.029h0.01v0.02h0.01v0.025h0.008v0.02h0.01v0.029h0.01v0.018h0.01v0.02h0.008v0.027h0.01v0.02h0.01v0.018h0.01v0.018h0.01v0.029h0.009v0.018h0.009v0.02h0.01v0.027h0.01v0.02h0.01v0.018h0.008v0.02h0.01v0.027h0.01v0.018h0.008v0.02h0.01v0.029h0.009v0.018h0.011v0.018H4.84v0.02h0.01v0.029h0.01v0.018h0.009v0.018h0.011v0.027h0.008v0.02h0.011v0.018h0.009v0.021h0.008v0.027h0.011v0.016h0.009v0.021h0.01v0.027h0.008v0.018h0.011v0.021h0.009v0.016h0.01v0.029h0.01v0.02h0.009v0.018h0.009v0.029h0.011v0.016h0.009v0.02h0.01v0.02h0.009v0.027h0.009v0.02h0.01v0.018h0.008v0.02h0.01v0.029h0.009v0.018h0.011v0.02h0.01v0.016H5.12v0.018h0.01v0.021h0.009v0.018h0.01v0.029h0.008v0.018h0.01v0.018h0.01v0.021h0.009v0.018h0.01v0.02h0.009v0.018h0.01v0.027h0.01v0.02h0.01v0.018h0.01v0.02H5.25v0.018h0.01v0.018h0.009v0.021h0.01v0.027h0.01v0.018h0.009v0.02h0.01v0.018h0.009v0.018h0.009v0.02h0.01v0.02h0.01v0.027h0.01v0.018h0.01v0.02h0.008v0.02h0.01v0.018h0.01v0.018h0.009v0.021h0.01v0.027h0.009v0.018h0.01v0.02h0.01v0.02h0.008v0.016h0.011v0.02h0.009v0.018h0.009v0.029h0.009v0.02h0.01v0.018h0.01v0.02h0.009v0.018H5.52v0.02h0.01v0.018h0.01v0.018h0.01v0.02h0.009v0.02h0.011v0.018h0.009v0.02h0.007v0.02h0.011v0.018h0.009v0.018h0.01v0.02h0.009v0.02h0.011v0.018h0.009v0.02H5.65v0.02h0.011v0.016H5.67v0.02h0.01v0.02h0.008v0.02h0.01v0.018h0.01v0.02h0.008v0.018h0.01v0.02h0.01v0.018h0.01v0.02h0.01v0.018h0.01v0.018h0.009v0.02h0.009v0.02h0.01v0.018H5.8v0.02h0.009v0.018h0.01v0.02h0.01v0.018h0.009v0.02h0.009v0.02h0.01v0.018h0.01v0.02h0.009v0.018h0.01v0.02h0.011v0.018h0.008v0.02h0.01v0.018H5.92v0.02h0.01v0.018h0.01v0.02h0.01v0.027h0.01l0.009,0.01v0.02h0.009v0.018h0.01v0.018h0.009v0.02h0.01v0.02h0.009v0.018h0.01v0.02h0.009v0.018h0.01l0.009,0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.016h0.009v0.021h0.009v0.018h0.01v0.018h0.008v0.02h0.01v0.02h0.01l0.01,0.008v0.02h0.01v0.02h0.01v0.018h0.008v0.018h0.01v0.02H6.19v0.018h0.011v0.02h0.008v0.02h0.01l0.01,0.008v0.02h0.009v0.018h0.01v0.02h0.009v0.02h0.01v0.02h0.01v0.018h0.008v0.018h0.012v0.02h0.008v0.018h0.009l0.009,0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.018h0.009v0.02h0.009v0.018h0.01v0.02h0.01v0.02h0.009l0.011,0.008v0.02h0.008v0.018h0.01v0.018h0.01V38h0.008v0.018h0.01v0.018h0.01l0.01,0.01v0.018h0.009v0.02h0.01v0.02h0.009l0.01,0.008v0.021h0.01v0.018h0.008v0.018h0.01v0.02h0.01l0.009,0.01v0.018h0.011v0.02h0.008v0.018h0.01v0.02h0.01l0.01,0.008v0.02h0.008v0.02h0.01v0.018h0.01v0.02h0.009l0.009,0.008v0.02h0.01v0.018h0.01v0.02h0.01l0.009,0.008v0.021h0.011v0.018h0.008v0.016h0.009v0.02h0.009l0.01,0.01v0.02h0.01v0.02h0.01v0.018h0.009v0.018h0.01l0.009,0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.018h0.008l0.01,0.012v0.016h0.01v0.021h0.008v0.018h0.01l0.01,0.008v0.02h0.01v0.02h0.01v0.02h0.008v0.018h0.01l0.01,0.008v0.021h0.01v0.018h0.008v0.018h0.011l0.009,0.01v0.018h0.008v0.018h0.011l0.009,0.01v0.02h0.009v0.02h0.01l0.011,0.01v0.018h0.009v0.02H7.02v0.018h0.01l0.008,0.01v0.02h0.01v0.018h0.01l0.01,0.01v0.02h0.01v0.018h0.008l0.01,0.01v0.018h0.01v0.02h0.01l0.008,0.01v0.018h0.012v0.018h0.008v0.021h0.01l0.008,0.008v0.018h0.01v0.02h0.01l0.009,0.01v0.018h0.011v0.02h0.009l0.009,0.008v0.018h0.01v0.021h0.01l0.009,0.008v0.02h0.009v0.018h0.01v0.02h0.01l0.008,0.01v0.018h0.01v0.018h0.01l0.01,0.012v0.018h0.008v0.018h0.011l0.009,0.01v0.02h0.01v0.02h0.009L7.363,39.6v0.02h0.01v0.018h0.009l0.011,0.01v0.018h0.009v0.021H7.41v0.018h0.01l0.01,0.008v0.02h0.01v0.02h0.008l0.011,0.008v0.02h0.009l0.008,0.01v0.018h0.01v0.018h0.01l0.01,0.01v0.02h0.008l0.012,0.01v0.018h0.009v0.02h0.009l0.01,0.01v0.018h0.01l0.008,0.01v0.018h0.01v0.02h0.008l0.012,0.01V40h0.008l0.01,0.01v0.02h0.01v0.018h0.01l0.008,0.01v0.018h0.01l0.012,0.01v0.02h0.007v0.02h0.01l0.009,0.008v0.018h0.01l0.009,0.012v0.018h0.009v0.018h0.012l0.008,0.01v0.02h0.01l0.009,0.008v0.02h0.01v0.018h0.01l0.009,0.01v0.02h0.01l0.01,0.01v0.018h0.008v0.02h0.01l0.01,0.008v0.02h0.009l0.009,0.01v0.018h0.01v0.02h0.01l0.01,0.01v0.018h0.008l0.01,0.01v0.02h0.01v0.018h0.01l0.008,0.008v0.02h0.011v0.018h0.009l0.01,0.012v0.018h0.01l0.008,0.01v0.018h0.009l0.01,0.01v0.02h0.011l0.008,0.01v0.018h0.01l0.01,0.01v0.016h0.008V40.7h0.01l0.01,0.008v0.02h0.01l0.01,0.008v0.021H8.08l0.01,0.008v0.02H8.1l0.01,0.008v0.02h0.008l0.011,0.01v0.018h0.01l0.008,0.01v0.018h0.01l0.01,0.01v0.02h0.009l0.01,0.01v0.018h0.008l0.011,0.01v0.02h0.009l0.01,0.008v0.02h0.01l0.008,0.008v0.02H8.25l0.008,0.01v0.018h0.01l0.01,0.01v0.02h0.008v0.02h0.01l0.01,0.008v0.018h0.01l0.01,0.012v0.016h0.009l0.009,0.012v0.018h0.009l0.01,0.01v0.018h0.009l0.01,0.01v0.02h0.01l0.008,0.01v0.02h0.01l0.01,0.008v0.018h0.01l0.01,0.01v0.02h0.009l0.009,0.01v0.018h0.01l0.01,0.01v0.02H8.48l0.011,0.008v0.02H8.5l0.008,0.008v0.02h0.01l0.011,0.008v0.02h0.009l0.01,0.01v0.02h0.009l0.01,0.008v0.018h0.01l0.009,0.01v0.02h0.009l0.019,0.02v0.02h0.008l0.012,0.006v0.02h0.01l0.008,0.01v0.02h0.011l0.009,0.008v0.02h0.01l0.019,0.018v0.021h0.009l0.009,0.01v0.016h0.009l0.01,0.01v0.02h0.01l0.009,0.01v0.018h0.01l0.019,0.02v0.018h0.01l0.01,0.01v0.018h0.009l0.009,0.01v0.02h0.008l0.012,0.008v0.02h0.008l0.02,0.018v0.02h0.01l0.009,0.01v0.018h0.009l0.01,0.01v0.018h0.01l0.01,0.01v0.02h0.008l0.02,0.018v0.018h0.008l0.012,0.01v0.02h0.009l0.009,0.01v0.02h0.01l0.018,0.018v0.02h0.009l0.011,0.008v0.02h0.008l0.01,0.01v0.018h0.01l0.01,0.01v0.018h0.009l0.02,0.02v0.02h0.009l0.01,0.01v0.018h0.009l0.019,0.018v0.02H9.15l0.02,0.02v0.018h0.01l0.01,0.008v0.02h0.01l0.018,0.021v0.016h0.01l0.019,0.02v0.018h0.009l0.01,0.01v0.018h0.009l0.019,0.021v0.018h0.011l0.018,0.018v0.02H9.33l0.008,0.01v0.018h0.009l0.021,0.02v0.02h0.008l0.018,0.018v0.018h0.01l0.01,0.01v0.02h0.01l0.019,0.018v0.02h0.009l0.02,0.018v0.018h0.008l0.01,0.01v0.021h0.01l0.019,0.018v0.018h0.011l0.018,0.02v0.018h0.008l0.021,0.02v0.018H9.58l0.01,0.01v0.018h0.009l0.019,0.02v0.02h0.01l0.02,0.018v0.02h0.008l0.01,0.01v0.018h0.008l0.02,0.018v0.021h0.01L9.719,43.1v0.021H9.73l0.025,0.027v0.018h0.01l0.02,0.02v0.018h0.01l0.018,0.02v0.018h0.009l0.021,0.02v0.018H9.85l0.027,0.029v0.018h0.01l0.02,0.02v0.018h0.01l0.018,0.016v0.021h0.01l0.027,0.029v0.018h0.01l0.02,0.02v0.018h0.008l0.021,0.02v0.02h0.008l0.019,0.018v0.018h0.01l0.027,0.029v0.018h0.01l0.018,0.018v0.02h0.01l0.018,0.02v0.018h0.012l0.026,0.027v0.02h0.009l0.02,0.02v0.018h0.01l0.02,0.02v0.018h0.009l0.026,0.027v0.02h0.01l0.02,0.02v0.018h0.009l0.028,0.027v0.02h0.008l0.029,0.027v0.02h0.008l0.029,0.027v0.02h0.01l0.027,0.027v0.018h0.01l0.027,0.027v0.02h0.01l0.027,0.029v0.018h0.01l0.037,0.039v0.018h0.01l0.027,0.027v0.018h0.01l0.027,0.029v0.018h0.01l0.028,0.027v0.02h0.009l0.027,0.029v0.018h0.01l0.029,0.027v0.02h0.009l0.028,0.029v0.018h0.009l0.027,0.027v0.018h0.009l0.037,0.039V44.6h0.012l0.025,0.029v0.018h0.01l0.027,0.027v0.02h0.011l0.046,0.045v0.02h0.01l0.037,0.037v0.02h0.009l0.048,0.047v0.018h0.008l0.038,0.039v0.016h0.009l0.047,0.049V45h0.009l0.037,0.037v0.02h0.01l0.046,0.045v0.021h0.011l0.038,0.035v0.018h0.008l0.046,0.049v0.018h0.011l0.037,0.037v0.02h0.01l0.047,0.045v0.02h0.008l0.037,0.037v0.02h0.01l0.056,0.055v0.02h0.009l0.065,0.066v0.016h0.009l0.065,0.066v0.02h0.011l0.064,0.064v0.018h0.01l0.064,0.066v0.02h0.01l0.064,0.064v0.018h0.01l0.064,0.066v0.018h0.01l0.065,0.064v0.02h0.009l0.066,0.066v0.018h0.009l0.094,0.094v0.018h0.009l0.121,0.121v0.018h0.01l0.11,0.113v0.018h0.01l0.12,0.121v0.02h0.011l0.111,0.111v0.021h0.009l0.168,0.164v0.02h0.01l0.373,0.373v0.018h0.008C20,54.083,28.688,58.446,38.164,59.592l0.047,0.008v-0.008l0.084-0.012c20.826-2.592,36.631-20.285,36.701-41.395l0.012-0.355h-0.012v-0.727h-0.008v-0.361h-0.009V16.5h-0.009v-0.252h-0.01v-0.242h-0.01v-0.203h-0.009v-0.15h-0.009v-0.15h-0.01v-0.148h-0.01v-0.148h-0.009v-0.148h-0.011v-0.141h-0.009V14.77h-0.009v-0.104h-0.01v-0.104h-0.01v-0.102h-0.009V14.35H74.84v-0.104h-0.01v-0.102h-0.009v-0.104h-0.009V13.93h-0.01v-0.039\"/></svg>"};
var interstateshieldgreen1={"name":"interstateshieldgreen1","width":60.924,"height":60.946,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"60.924\" height=\"60.946\"><path fill=\"none\" d=\"M30.463,60.946L30.43,60.94C12.797,57.36,0,41.686,0,23.668C0,15.025,2.832,6.873,8.187,0.092L8.259,0l0.112,0.035c3.559,1.088,7.266,1.641,11.02,1.641c3.764,0,7.474-0.553,11.024-1.641l0.05-0.016l0.051,0.016c3.554,1.088,7.264,1.641,11.025,1.641c3.754,0,7.459-0.551,11.012-1.637l0.112-0.035l0.072,0.094c5.355,6.77,8.187,14.922,8.187,23.57c0,18.018-12.796,33.692-30.427,37.272L30.463,60.946z\"/><path fill=\"#006345\" d=\"M52.299,1.455C48.944,2.48,44.76,3.033,41.069,3.033c-3.692,0-7.257-0.549-10.612-1.578C27.1,2.482,23.53,3.033,19.843,3.033c-3.69,0-7.848-0.551-11.204-1.578C6.089,4.68,4.235,8.691,3.045,12.816h54.83C56.695,8.688,54.852,4.68,52.299,1.455\"/><path fill=\"#006345\" d=\"M58.222,14.076H2.713c-0.857,3.381-1.278,6.789-1.278,9.875c0,17.127,12.467,32.198,29.026,35.557c16.561-3.359,29.029-18.43,29.029-35.557C59.49,20.865,59.074,17.457,58.222,14.076\"/></svg>"};
var interstateshieldgreen2={"name":"interstateshieldgreen2","width":76.18,"height":60.95,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"76.18\" height=\"60.95\"><path fill=\"none\" d=\"M3.965,0c5.512,1.631,11.258,2.459,17.059,2.459S32.568,1.631,38.081,0.01L38.09,0c5.512,1.631,11.256,2.459,17.058,2.459c5.8,0,11.545-0.828,17.058-2.449l-0.01,0.01c2.626,5.652,3.984,11.816,3.984,18.072c0,21.881-16.377,40.297-38.099,42.858C16.357,58.389,0,39.973,0,18.092C0,11.836,1.35,5.672,3.965,0.02\"/><path fill=\"#006345\" d=\"M38.081,1.305l-0.028,0.008C32.588,2.865,26.98,3.67,21.293,3.697l-0.716,0.01v-0.01l-0.783-0.01c-5.089-0.09-10.2-0.801-15.112-2.141H4.664l-0.02,0.037C3.146,5.088,2.113,8.809,1.629,12.598v0.121H74.57v-0.027h-0.01v-0.066h-0.01v-0.064h-0.008v-0.064h-0.01v-0.074h-0.011v-0.064h-0.009v-0.066h-0.01v-0.066h-0.01V12.16h-0.008v-0.064h-0.01v-0.064h-0.01v-0.064h-0.009v-0.076h-0.009v-0.064h-0.01V11.76h-0.01v-0.064h-0.01v-0.055h-0.008v-0.057h-0.01v-0.055h-0.01v-0.057h-0.01v-0.057h-0.009v-0.055h-0.009v-0.057h-0.01v-0.057h-0.008v-0.055h-0.011v-0.057h-0.009v-0.055h-0.01v-0.057h-0.01v-0.055H74.3v-0.059h-0.01v-0.055h-0.009v-0.055h-0.01v-0.057h-0.009v-0.057h-0.011v-0.055h-0.008v-0.047h-0.01v-0.047h-0.01v-0.047h-0.008v-0.057h-0.01v-0.045h-0.011v-0.047h-0.009v-0.045h-0.01v-0.049h-0.009v-0.057H74.16V10.15h-0.009v-0.047h-0.01v-0.047h-0.009V10.01h-0.01V9.953h-0.01V9.908h-0.01V9.861h-0.009V9.814h-0.009V9.768h-0.01V9.713h-0.01V9.664h-0.01V9.619h-0.008V9.582H74.04V9.533h-0.011V9.5h-0.008V9.451h-0.01V9.406h-0.011V9.367h-0.009V9.322h-0.01V9.285h-0.009V9.238h-0.009V9.189h-0.01V9.154h-0.01V9.107h-0.008V9.068h-0.01V9.023h-0.01V8.986h-0.01V8.939h-0.009V8.893h-0.01V8.855h-0.009V8.809h-0.009V8.771h-0.011V8.725h-0.009V8.678h-0.01V8.641h-0.008V8.605h-0.009V8.568h-0.011V8.529h-0.009V8.482h-0.01V8.445h-0.01V8.41h-0.009V8.371H73.77V8.334h-0.01V8.299h-0.01V8.26h-0.009V8.221H73.73V8.186h-0.008V8.148h-0.01V8.102h-0.008V8.064h-0.01V8.025h-0.01V7.988h-0.01V7.953h-0.01V7.916h-0.01V7.877h-0.008V7.842h-0.01V7.803h-0.01V7.766H73.62V7.721h-0.009V7.682h-0.01V7.646h-0.01V7.607h-0.009V7.58h-0.009V7.543h-0.01V7.506h-0.01V7.477h-0.009V7.439h-0.01V7.404h-0.011V7.365h-0.008V7.338h-0.01V7.301H73.5V7.264h-0.01V7.236h-0.01V7.199h-0.01V7.16h-0.01V7.135h-0.009V7.096h-0.009V7.059h-0.01V7.021h-0.01V6.994h-0.01V6.957h-0.008V6.918h-0.01V6.891h-0.01V6.854h-0.008V6.816h-0.01V6.791h-0.01V6.75h-0.01V6.713h-0.01V6.676h-0.01V6.648h-0.008V6.611h-0.01V6.584h-0.009V6.557h-0.009V6.518h-0.011V6.49h-0.009V6.453h-0.008V6.424h-0.012V6.398h-0.008V6.359h-0.01V6.332h-0.01V6.305H73.22V6.268h-0.009V6.238h-0.01V6.211h-0.01V6.174h-0.009V6.146h-0.01V6.117h-0.009V6.08h-0.01V6.053h-0.01V6.016h-0.009V5.986h-0.01V5.961h-0.009V5.924h-0.008V5.895h-0.011V5.867H73.09V5.83h-0.01V5.801h-0.01V5.773h-0.01V5.738h-0.01V5.707h-0.008V5.682h-0.01V5.643h-0.01V5.615h-0.009V5.586h-0.009V5.561h-0.01V5.531h-0.01V5.502h-0.008V5.475h-0.01V5.447h-0.01V5.41h-0.01V5.383h-0.01V5.354h-0.008V5.326h-0.01V5.299h-0.01V5.271h-0.009V5.244h-0.009V5.215h-0.01V5.186h-0.01V5.16h-0.01V5.131h-0.01V5.104h-0.008V5.076h-0.01V5.039h-0.01V5.012h-0.01V4.982H72.81V4.955h-0.011V4.926h-0.007V4.898h-0.01V4.869h-0.009V4.844h-0.01V4.814h-0.01V4.787h-0.01V4.76h-0.009V4.732h-0.01V4.693h-0.009V4.664h-0.009V4.646h-0.011V4.619h-0.009V4.592H72.68V4.564h-0.01V4.535h-0.01V4.508h-0.008V4.479h-0.01V4.461h-0.011V4.432h-0.009V4.406h-0.01V4.377h-0.008V4.348h-0.01V4.32h-0.01V4.303h-0.008V4.275h-0.009V4.246h-0.011V4.219h-0.01V4.189H72.54V4.162h-0.01V4.145h-0.009V4.117h-0.01V4.09h-0.009V4.061h-0.011V4.033h-0.008V4.004h-0.01V3.986h-0.009V3.961h-0.009V3.93h-0.01V3.902h-0.01V3.873h-0.01V3.846h-0.01V3.816h-0.009V3.799H72.4V3.771h-0.01V3.742h-0.008V3.717h-0.01V3.688h-0.009V3.67h-0.011V3.643h-0.009V3.613h-0.009v-0.02h-0.011V3.568h-0.009V3.547h-0.01V3.52h-0.008V3.492h-0.012V3.475h-0.008V3.447h-0.01V3.418h-0.009V3.4h-0.009V3.371h-0.01V3.344h-0.01v-0.02h-0.01V3.295h-0.009V3.277h-0.009V3.25h-0.01V3.223h-0.01v-0.02h-0.009V3.178h-0.009V3.146h-0.01V3.129h-0.009V3.102h-0.009v-0.02h-0.01V3.057h-0.01V3.027h-0.01V3.01h-0.01V2.979h-0.01V2.953h-0.009v-0.02h-0.009V2.906h-0.01v-0.02h-0.009V2.859h-0.009V2.83h-0.009V2.812h-0.011V2.785h-0.01V2.756H72.01V2.738h-0.011V2.711H71.99v-0.02h-0.01V2.664h-0.01v-0.02h-0.009V2.627h-0.009V2.6h-0.01V2.58h-0.008V2.551h-0.01V2.533h-0.01V2.508h-0.009V2.486h-0.009V2.459h-0.012v-0.02h-0.008V2.41h-0.01V2.395h-0.01V2.377h-0.008V2.348h-0.01V2.33h-0.01V2.301h-0.01V2.283h-0.008V2.254h-0.01V2.236h-0.01V2.207h-0.009V2.189h-0.01V2.172h-0.011V2.141h-0.008V2.125h-0.01V2.096h-0.009v-0.02h-0.01V2.049h-0.009V2.031h-0.01V2.004h-0.009v-0.02h-0.01v-0.02h-0.009V1.938h-0.01v-0.02h-0.01V1.893h-0.01v-0.02h-0.008V1.844h-0.009V1.826h-0.011V1.799h-0.01v-0.02h-0.008V1.76H71.6V1.742h-0.01V1.725h-0.008v-0.02H71.57v-0.02h-0.009V1.668h-0.009v-0.02h-0.01V1.631h-0.008v-0.02h-0.01V1.594h-0.01v-0.02h-0.009V1.557h-0.028c-5.168,1.398-10.52,2.115-15.875,2.141l-0.717,0.01v-0.01l-0.781-0.01c-5.379-0.092-10.676-0.879-15.85-2.336l-0.139-0.047\"/><path fill=\"#006345\" d=\"M1.564,13.891l0.008,0.012L1.564,13.93c-0.127,1.297-0.189,2.602-0.197,3.9v0.355h0.01v0.727h0.01v0.361h0.01v0.242h0.009v0.254h0.009v0.24h0.01v0.205h0.01v0.148h0.009v0.148h0.009v0.15h0.01v0.15h0.01v0.146h0.009V21.1h0.009v0.148h0.01v0.102h0.01v0.104h0.008v0.1h0.01v0.115h0.01v0.104h0.01v0.102h0.01v0.102h0.01v0.111h0.008v0.102h0.01v0.104h0.01v0.084h0.01v0.084H1.61v0.074h0.009v0.084h0.01v0.084h0.008v0.084h0.01v0.084h0.01v0.074h0.01v0.082h0.01v0.084h0.008v0.086h0.01v0.074h0.01v0.082h0.01v0.066h0.01v0.064h0.009v0.066H1.74v0.064h0.009v0.074H1.76v0.066h0.008v0.064h0.01v0.066h0.01v0.062h0.01v0.066h0.009v0.064h0.009v0.066h0.01v0.074h0.009v0.064h0.009v0.066h0.01v0.064h0.01v0.057h0.01v0.055h0.01v0.055h0.01v0.059h0.008v0.055h0.01v0.057h0.008v0.055h0.01v0.057h0.01v0.055h0.01v0.057h0.009v0.055h0.009v0.059h0.01v0.055h0.01v0.055h0.01v0.057h0.01v0.057h0.009v0.055H2.02v0.066h0.009v0.045h0.011v0.047h0.008v0.045h0.009v0.049h0.011v0.055h0.01v0.049h0.008v0.045h0.011v0.047h0.009v0.045h0.01v0.057h0.01v0.047h0.008v0.047h0.01v0.047h0.009V26.1H2.16v0.055h0.008v0.047h0.01v0.047h0.01v0.047h0.01v0.047h0.01v0.055h0.008v0.047h0.011v0.047h0.009v0.037h0.008v0.047h0.011v0.037h0.009v0.047h0.01v0.047h0.008v0.037h0.01v0.045h0.01v0.039h0.01v0.047h0.009v0.045h0.011v0.037h0.01v0.047h0.008v0.037h0.009v0.047h0.009v0.037h0.01v0.047h0.01v0.047h0.01v0.037h0.01v0.047H2.41v0.037h0.01v0.047h0.01v0.045h0.009v0.039h0.01v0.037h0.009v0.037h0.009v0.037h0.01v0.045h0.009v0.039h0.01v0.035h0.01v0.039h0.01v0.037h0.009v0.037h0.01v0.037h0.01v0.039h0.009v0.035h0.01v0.037h0.008v0.047h0.009v0.037h0.011v0.037h0.008v0.037h0.011v0.037h0.009v0.039h0.01v0.037h0.01v0.035h0.008v0.039h0.012v0.037h0.008v0.047h0.01v0.038h0.009v0.035h0.009V28.5h0.01v0.029h0.009v0.035h0.01v0.039h0.011v0.027h0.008v0.037h0.01v0.039h0.01v0.037h0.01v0.029h0.008v0.035h0.01v0.037h0.01v0.027h0.008v0.039h0.01v0.037h0.01v0.027h0.01v0.037h0.009v0.039h0.01v0.035h0.009v0.027h0.01v0.037h0.01v0.037h0.008v0.029h0.01v0.037h0.01v0.035h0.009v0.029h0.011v0.037h0.009v0.037h0.009v0.039h0.01v0.027h0.01v0.037h0.008v0.027h0.01v0.027h0.01v0.037h0.01v0.029h0.008v0.037h0.01v0.027h0.01v0.029h0.009v0.035h0.011v0.031h0.008v0.025h0.01v0.039h0.009v0.027h0.01v0.027H3.09v0.037H3.1v0.027h0.009v0.027h0.01v0.037h0.011v0.029h0.008v0.037h0.01v0.027h0.009v0.027h0.009v0.039h0.01v0.027h0.01v0.027h0.01v0.039h0.009v0.027h0.009v0.027h0.01v0.037h0.01v0.027h0.01v0.029h0.008v0.035h0.011v0.029h0.009v0.027h0.009v0.029h0.009v0.027h0.01v0.027h0.009v0.027h0.011v0.029h0.009V30.7h0.009v0.027h0.01v0.027h0.01v0.029H3.36v0.027h0.009v0.029h0.01v0.025h0.01v0.029h0.009v0.027h0.009v0.029h0.01v0.027h0.01v0.029h0.009v0.025h0.01v0.037h0.011V31.1h0.009v0.027h0.009v0.029h0.009v0.025h0.01v0.029h0.008v0.027H3.51v0.027h0.009v0.029h0.01v0.029h0.009v0.025h0.01v0.029h0.01v0.037h0.009v0.029h0.011v0.016h0.008v0.029h0.01v0.027h0.008v0.029h0.01v0.027H3.62v0.027h0.011v0.027h0.008v0.02h0.01v0.029h0.011v0.025h0.009v0.029h0.01v0.029h0.009v0.025h0.009v0.02h0.01v0.027h0.009v0.029h0.01v0.027h0.009v0.027h0.01v0.029h0.009v0.018h0.01v0.029H3.77v0.027h0.01v0.027h0.01v0.029h0.01v0.025h0.008v0.02h0.01v0.027h0.01v0.029h0.01v0.027h0.009v0.027h0.009v0.029h0.01v0.027h0.01v0.02h0.009v0.027h0.01v0.027H3.9v0.029h0.01v0.027h0.008v0.018h0.01v0.027h0.01v0.029h0.009v0.018h0.009v0.029h0.01v0.02h0.01v0.027h0.01v0.027h0.01v0.018h0.01v0.027h0.008v0.027h0.01v0.02h0.008v0.029H4.04v0.027h0.009v0.02h0.01v0.027h0.01v0.018h0.009v0.029h0.009v0.027h0.01v0.02h0.01v0.027h0.009v0.027h0.009v0.02h0.01v0.029h0.009v0.018H4.15v0.027h0.01v0.027h0.01v0.02h0.01v0.027h0.01v0.027h0.01v0.02h0.009v0.027h0.009v0.02h0.01v0.027h0.01v0.027h0.01v0.02h0.008v0.027h0.01v0.027h0.01v0.02h0.008v0.027h0.011v0.02h0.009v0.027h0.01v0.018h0.01v0.02h0.008v0.029h0.01v0.018h0.009v0.027h0.011v0.02h0.009v0.027h0.009v0.02h0.01v0.027h0.01v0.018h0.01v0.029h0.008v0.02h0.01v0.018h0.01v0.027h0.008v0.02h0.01v0.027h0.01v0.018h0.01v0.029h0.008v0.018h0.01v0.029h0.01v0.018h0.01v0.02h0.01v0.027h0.008v0.02h0.01v0.027h0.01v0.018h0.008v0.029h0.011v0.018h0.01v0.029H4.58v0.02h0.01v0.018h0.009v0.027h0.009v0.018h0.01v0.029h0.01v0.02h0.01v0.025h0.008v0.02h0.01v0.029h0.01v0.018h0.01v0.02h0.008v0.027h0.01v0.02h0.01v0.018h0.01v0.018h0.01v0.029h0.009v0.018h0.009v0.02h0.01v0.027h0.01v0.02h0.01v0.018h0.008v0.02h0.01v0.027h0.01v0.018h0.008v0.02h0.01v0.029h0.009v0.018h0.011v0.018H4.84v0.02h0.01v0.029h0.01v0.018h0.009v0.018h0.011v0.027h0.008v0.02h0.011v0.018h0.009v0.021h0.008v0.027h0.011v0.016h0.009v0.021h0.01v0.027h0.008v0.018h0.011v0.021h0.009v0.016h0.01v0.029h0.01v0.02h0.009v0.018h0.009v0.029h0.011v0.016h0.009v0.02h0.01v0.02h0.009v0.027h0.009v0.02h0.01v0.018h0.008v0.02h0.01v0.029h0.009v0.018h0.011v0.02h0.01v0.016H5.12v0.018h0.01v0.021h0.009v0.018h0.01v0.029h0.008v0.018h0.01v0.018h0.01v0.021h0.009v0.018h0.01v0.02h0.009v0.018h0.01v0.027h0.01v0.02h0.01v0.018h0.01v0.02H5.25v0.018h0.01v0.018h0.009v0.021h0.01v0.027h0.01v0.018h0.009v0.02h0.01v0.018h0.009v0.018h0.009v0.02h0.01v0.02h0.01v0.027h0.01v0.018h0.01v0.02h0.008v0.02h0.01v0.018h0.01v0.018h0.009v0.021h0.01v0.027h0.009v0.018h0.01v0.02h0.01v0.02h0.008v0.016h0.011v0.02h0.009v0.018h0.009v0.029h0.009v0.02h0.01v0.018h0.01v0.02h0.009v0.018H5.52v0.02h0.01v0.018h0.01v0.018h0.01v0.02h0.009v0.02h0.011v0.018h0.009v0.02h0.007v0.02h0.011v0.018h0.009v0.018h0.01v0.02h0.009v0.02h0.011v0.018h0.009v0.02H5.65v0.02h0.011v0.016H5.67v0.02h0.01v0.02h0.008v0.02h0.01v0.018h0.01v0.02h0.008v0.018h0.01v0.02h0.01v0.018h0.01v0.02h0.01v0.018h0.01v0.018h0.009v0.02h0.009v0.02h0.01v0.018H5.8v0.02h0.009v0.018h0.01v0.02h0.01v0.018h0.009v0.02h0.009v0.02h0.01v0.018h0.01v0.02h0.009v0.018h0.01v0.02h0.011v0.018h0.008v0.02h0.01v0.018H5.92v0.02h0.01v0.018h0.01v0.02h0.01v0.027h0.01l0.009,0.01v0.02h0.009v0.018h0.01v0.018h0.009v0.02h0.01v0.02h0.009v0.018h0.01v0.02h0.009v0.018h0.01l0.009,0.01v0.018h0.01v0.02h0.01v0.02h0.01v0.016h0.009v0.021h0.009v0.018h0.01v0.018h0.008v0.02h0.01v0.02h0.01l0.01,0.008v0.02h0.01v0.02h0.01v0.018h0.008v0.018h0.01v0.02H6.19v0.018h0.011v0.02h0.008v0.02h0.01l0.01,0.008v0.02h0.009v0.018h0.01v0.02h0.009v0.02h0.01v0.02h0.01v0.018h0.008v0.018h0.012v0.02h0.008v0.018h0.009l0.009,0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.018h0.009v0.02h0.009v0.018h0.01v0.02h0.01v0.02h0.009l0.011,0.008v0.02h0.008v0.018h0.01v0.018h0.01V38h0.008v0.018h0.01v0.018h0.01l0.01,0.01v0.018h0.009v0.02h0.01v0.02h0.009l0.01,0.008v0.021h0.01v0.018h0.008v0.018h0.01v0.02h0.01l0.009,0.01v0.018h0.011v0.02h0.008v0.018h0.01v0.02h0.01l0.01,0.008v0.02h0.008v0.02h0.01v0.018h0.01v0.02h0.009l0.009,0.008v0.02h0.01v0.018h0.01v0.02h0.01l0.009,0.008v0.021h0.011v0.018h0.008v0.016h0.009v0.02h0.009l0.01,0.01v0.02h0.01v0.02h0.01v0.018h0.009v0.018h0.01l0.009,0.01v0.02h0.01v0.02h0.01v0.018h0.01v0.018h0.008l0.01,0.012v0.016h0.01v0.021h0.008v0.018h0.01l0.01,0.008v0.02h0.01v0.02h0.01v0.02h0.008v0.018h0.01l0.01,0.008v0.021h0.01v0.018h0.008v0.018h0.011l0.009,0.01v0.018h0.008v0.018h0.011l0.009,0.01v0.02h0.009v0.02h0.01l0.011,0.01v0.018h0.009v0.02H7.02v0.018h0.01l0.008,0.01v0.02h0.01v0.018h0.01l0.01,0.01v0.02h0.01v0.018h0.008l0.01,0.01v0.018h0.01v0.02h0.01l0.008,0.01v0.018h0.012v0.018h0.008v0.021h0.01l0.008,0.008v0.018h0.01v0.02h0.01l0.009,0.01v0.018h0.011v0.02h0.009l0.009,0.008v0.018h0.01v0.021h0.01l0.009,0.008v0.02h0.009v0.018h0.01v0.02h0.01l0.008,0.01v0.018h0.01v0.018h0.01l0.01,0.012v0.018h0.008v0.018h0.011l0.009,0.01v0.02h0.01v0.02h0.009L7.363,39.6v0.02h0.01v0.018h0.009l0.011,0.01v0.018h0.009v0.021H7.41v0.018h0.01l0.01,0.008v0.02h0.01v0.02h0.008l0.011,0.008v0.02h0.009l0.008,0.01v0.018h0.01v0.018h0.01l0.01,0.01v0.02h0.008l0.012,0.01v0.018h0.009v0.02h0.009l0.01,0.01v0.018h0.01l0.008,0.01v0.018h0.01v0.02h0.008l0.012,0.01V40h0.008l0.01,0.01v0.02h0.01v0.018h0.01l0.008,0.01v0.018h0.01l0.012,0.01v0.02h0.007v0.02h0.01l0.009,0.008v0.018h0.01l0.009,0.012v0.018h0.009v0.018h0.012l0.008,0.01v0.02h0.01l0.009,0.008v0.02h0.01v0.018h0.01l0.009,0.01v0.02h0.01l0.01,0.01v0.018h0.008v0.02h0.01l0.01,0.008v0.02h0.009l0.009,0.01v0.018h0.01v0.02h0.01l0.01,0.01v0.018h0.008l0.01,0.01v0.02h0.01v0.018h0.01l0.008,0.008v0.02h0.011v0.018h0.009l0.01,0.012v0.018h0.01l0.008,0.01v0.018h0.009l0.01,0.01v0.02h0.011l0.008,0.01v0.018h0.01l0.01,0.01v0.016h0.008V40.7h0.01l0.01,0.008v0.02h0.01l0.01,0.008v0.021H8.08l0.01,0.008v0.02H8.1l0.01,0.008v0.02h0.008l0.011,0.01v0.018h0.01l0.008,0.01v0.018h0.01l0.01,0.01v0.02h0.009l0.01,0.01v0.018h0.008l0.011,0.01v0.02h0.009l0.01,0.008v0.02h0.01l0.008,0.008v0.02H8.25l0.008,0.01v0.018h0.01l0.01,0.01v0.02h0.008v0.02h0.01l0.01,0.008v0.018h0.01l0.01,0.012v0.016h0.009l0.009,0.012v0.018h0.009l0.01,0.01v0.018h0.009l0.01,0.01v0.02h0.01l0.008,0.01v0.02h0.01l0.01,0.008v0.018h0.01l0.01,0.01v0.02h0.009l0.009,0.01v0.018h0.01l0.01,0.01v0.02H8.48l0.011,0.008v0.02H8.5l0.008,0.008v0.02h0.01l0.011,0.008v0.02h0.009l0.01,0.01v0.02h0.009l0.01,0.008v0.018h0.01l0.009,0.01v0.02h0.009l0.019,0.02v0.02h0.008l0.012,0.006v0.02h0.01l0.008,0.01v0.02h0.011l0.009,0.008v0.02h0.01l0.019,0.018v0.021h0.009l0.009,0.01v0.016h0.009l0.01,0.01v0.02h0.01l0.009,0.01v0.018h0.01l0.019,0.02v0.018h0.01l0.01,0.01v0.018h0.009l0.009,0.01v0.02h0.008l0.012,0.008v0.02h0.008l0.02,0.018v0.02h0.01l0.009,0.01v0.018h0.009l0.01,0.01v0.018h0.01l0.01,0.01v0.02h0.008l0.02,0.018v0.018h0.008l0.012,0.01v0.02h0.009l0.009,0.01v0.02h0.01l0.018,0.018v0.02h0.009l0.011,0.008v0.02h0.008l0.01,0.01v0.018h0.01l0.01,0.01v0.018h0.009l0.02,0.02v0.02h0.009l0.01,0.01v0.018h0.009l0.019,0.018v0.02H9.15l0.02,0.02v0.018h0.01l0.01,0.008v0.02h0.01l0.018,0.021v0.016h0.01l0.019,0.02v0.018h0.009l0.01,0.01v0.018h0.009l0.019,0.021v0.018h0.011l0.018,0.018v0.02H9.33l0.008,0.01v0.018h0.009l0.021,0.02v0.02h0.008l0.018,0.018v0.018h0.01l0.01,0.01v0.02h0.01l0.019,0.018v0.02h0.009l0.02,0.018v0.018h0.008l0.01,0.01v0.021h0.01l0.019,0.018v0.018h0.011l0.018,0.02v0.018h0.008l0.021,0.02v0.018H9.58l0.01,0.01v0.018h0.009l0.019,0.02v0.02h0.01l0.02,0.018v0.02h0.008l0.01,0.01v0.018h0.008l0.02,0.018v0.021h0.01L9.719,43.1v0.021H9.73l0.025,0.027v0.018h0.01l0.02,0.02v0.018h0.01l0.018,0.02v0.018h0.009l0.021,0.02v0.018H9.85l0.027,0.029v0.018h0.01l0.02,0.02v0.018h0.01l0.018,0.016v0.021h0.01l0.027,0.029v0.018h0.01l0.02,0.02v0.018h0.008l0.021,0.02v0.02h0.008l0.019,0.018v0.018h0.01l0.027,0.029v0.018h0.01l0.018,0.018v0.02h0.01l0.018,0.02v0.018h0.012l0.026,0.027v0.02h0.009l0.02,0.02v0.018h0.01l0.02,0.02v0.018h0.009l0.026,0.027v0.02h0.01l0.02,0.02v0.018h0.009l0.028,0.027v0.02h0.008l0.029,0.027v0.02h0.008l0.029,0.027v0.02h0.01l0.027,0.027v0.018h0.01l0.027,0.027v0.02h0.01l0.027,0.029v0.018h0.01l0.037,0.039v0.018h0.01l0.027,0.027v0.018h0.01l0.027,0.029v0.018h0.01l0.028,0.027v0.02h0.009l0.027,0.029v0.018h0.01l0.029,0.027v0.02h0.009l0.028,0.029v0.018h0.009l0.027,0.027v0.018h0.009l0.037,0.039V44.6h0.012l0.025,0.029v0.018h0.01l0.027,0.027v0.02h0.011l0.046,0.045v0.02h0.01l0.037,0.037v0.02h0.009l0.048,0.047v0.018h0.008l0.038,0.039v0.016h0.009l0.047,0.049V45h0.009l0.037,0.037v0.02h0.01l0.046,0.045v0.021h0.011l0.038,0.035v0.018h0.008l0.046,0.049v0.018h0.011l0.037,0.037v0.02h0.01l0.047,0.045v0.02h0.008l0.037,0.037v0.02h0.01l0.056,0.055v0.02h0.009l0.065,0.066v0.016h0.009l0.065,0.066v0.02h0.011l0.064,0.064v0.018h0.01l0.064,0.066v0.02h0.01l0.064,0.064v0.018h0.01l0.064,0.066v0.018h0.01l0.065,0.064v0.02h0.009l0.066,0.066v0.018h0.009l0.094,0.094v0.018h0.009l0.121,0.121v0.018h0.01l0.11,0.113v0.018h0.01l0.12,0.121v0.02h0.011l0.111,0.111v0.021h0.009l0.168,0.164v0.02h0.01l0.373,0.373v0.018h0.008C20,54.083,28.688,58.446,38.164,59.592l0.047,0.008v-0.008l0.084-0.012c20.826-2.592,36.631-20.285,36.701-41.395l0.012-0.355h-0.012v-0.727h-0.008v-0.361h-0.009V16.5h-0.009v-0.252h-0.01v-0.242h-0.01v-0.203h-0.009v-0.15h-0.009v-0.15h-0.01v-0.148h-0.01v-0.148h-0.009v-0.148h-0.011v-0.141h-0.009V14.77h-0.009v-0.104h-0.01v-0.104h-0.01v-0.102h-0.009V14.35H74.84v-0.104h-0.01v-0.102h-0.009v-0.104h-0.009V13.93h-0.01v-0.039\"/></svg>"};
var ms1_6border={"name":"ms1-6border","width":61.375,"height":61.375,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"61.375\" height=\"61.375\"><path fill=\"none\" d=\"M12.545,61.375L12.545,61.375h36.281L61.104,18.85c0.18-0.619,0.271-1.26,0.271-1.906c0-2.705-1.586-5.156-4.053-6.268v-0.002L36.262,1.197C34.508,0.41,32.611,0,30.688,0s-3.822,0.41-5.576,1.197v0.002L4.053,10.676C1.586,11.787,0,14.238,0,16.943c0,0.646,0.09,1.287,0.27,1.906v-0.002L12.545,61.375z\"/></svg>"};
var shieldborder1={"name":"shieldborder1","width":60.924,"height":60.946,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"60.924\" height=\"60.946\"><path fill=\"none\" d=\"M30.463,60.946L30.43,60.94C12.797,57.36,0,41.686,0,23.668C0,15.025,2.832,6.873,8.187,0.092L8.259,0l0.112,0.035c3.559,1.088,7.266,1.641,11.02,1.641c3.764,0,7.474-0.553,11.024-1.641l0.05-0.016l0.051,0.016c3.554,1.088,7.264,1.641,11.025,1.641c3.754,0,7.459-0.551,11.012-1.637l0.112-0.035l0.072,0.094c5.355,6.77,8.187,14.922,8.187,23.57c0,18.018-12.796,33.692-30.427,37.272L30.463,60.946z\"/></svg>"};
var shieldborder2={"name":"shieldborder2","width":76.18,"height":60.95,"svgData":"<svg version=\"1.1\" id=\"Layer_1\" width=\"76.18\" height=\"60.95\"><path fill=\"none\" d=\"M3.965,0c5.512,1.631,11.258,2.459,17.059,2.459S32.568,1.631,38.081,0.01L38.09,0c5.512,1.631,11.256,2.459,17.058,2.459c5.8,0,11.545-0.828,17.058-2.449l-0.01,0.01c2.626,5.652,3.984,11.816,3.984,18.072c0,21.881-16.377,40.297-38.099,42.858C16.357,58.389,0,39.973,0,18.092C0,11.836,1.35,5.672,3.965,0.02\"/></svg>"};
layout.borderTypes = [beehive1,beehive2,beehiveborder1,beehiveborder2,interstateshield1,interstateshield2,interstateshieldgreen1,interstateshieldgreen2,highwayshield1,highwayshield2,ms1_6border,shieldborder1,shieldborder2];


    
var arShapeObjects = ["Rectangle","Circle/Oval","Polygon","Star","HOV Diamond"];
var arDividerType= ["Horizontal","Vertical"];

layout.signArrowTypes = layout.frdArrowTypes;
/*
    sign rules required:
    signRules.textSize
    signRules.borderSpace // space between edge and text
    signRules.lineSpace  // space between lines
    signRules.wordSpace  // space between words
    signRules.arrowSpace // space between text and arrows
    signRules.horArrowWide  // horizontal arrows
    signRules.horArrowHigh 
    signRules.vertArrowWide // vertical arrows
    signRules.vertArrowHigh 
    signRules.multiLineArrowHeight // size of arrow spanning multiple lines
    signRules.bArrowAfterText  // TD requires arrows and miles to be after the longest text line
    signRules.symbolSpacing // space required for a symbol
    signRules.symbolHeight  // height of the symbol
    */

layout.SetArrows = function(type)
{
    switch(type)
    {
        case 0: // FRD
            layout.signArrowTypes = layout.frdArrowTypes;
            break;
        case 1: // TD
            layout.signArrowTypes = layout.tdArrowTypes;
            break;
    }
}

layout.LayoutSign = function(signData, signRules)
{
    // grab the fonts at this size
    var curFont = fontlib.GetSizedFont(signData.fontId, signData.textSize);
    var textWidth = 0;
    signData.height = signRules.borderSpace * 2;
    var milePlacement = 0;
    var rArrowPos = 0;
    var widestLine = 0;
    var currentLineTop = signRules.borderSpace;
    var bHasSymbols = false;
    var farthestTextPos = 0;
    var widestMile = 0;
    var i = 0;
    var arDividers = [];
    var nDividerCount = 0;
    signData.lineSepSpace = signRules.lineSeparatorSpace;
    for(i = 0; i < signData.lineCount; i++)
    {
        // {"top":2.25,"left":2.25,"spacing":1,"text":"Sample Text"}
        curFont = fontlib.GetSizedFont(signData.fontId, signData.textSize, signData.lines[i].spacing);
        var symHeight = signRules.symbolHeight;
        if(signData.lines[i].symbolCount > 0)
        {
            if(signData.lines[i].text.indexOf("\u00A7") == -1) // not found!
            {
                signData.lines[i].symbolCount = 0;
                currentLineTop += (i==0?0:signRules.lineSpace + signData.textSize);
                signData.height += signRules.textSize + (i==0?0:signRules.lineSpace);
            }else{
                bHasSymbols = true;
                if(i == 0)
                {
                    if("symbolHeight" in signData.lines[i])
                    {
                        symHeight += signData.lines[i].symbolHeight;
                    }
                    signData.height += symHeight;
                    if(signData.lines[i].centerOnSymbol)
                    {
                        currentLineTop += (symHeight/2)-(frdData.textSize/2);
                    }else{
                        currentLineTop += symHeight - signRules.textSize;
                    }
                }else{
                    //signData.height += signRules.symbolSpacing + signRules.textSize + (i==0?0:signRules.lineSpace);
                    currentLineTop += signRules.symbolSpacing + signRules.textSize + (signRules.symbolHeight-(signRules.textSize));
                    signData.height = currentLineTop + signRules.textSize + (i==0?0:signRules.lineSpace);
                }
            }
        }else{
            currentLineTop += (i==0?0:signRules.lineSpace + signRules.textSize);
            signData.height += signRules.textSize + (i==0?0:signRules.lineSpace);
        }
    
        signData.lines[i].top = currentLineTop;
        //signData.lines[i].left = signRules.borderSpace + (signData.lines[i].hasLArrow?signRules.arrowSpace + signRules.horArrowWide:0);
        var multiArrowSpacing = 0;
        if(signData.lines[i].hasLArrow)
        {
            multiArrowSpacing = (signData.lines[i].hasLArrow==2?signRules.multiLineArrowHeight:signRules.horArrowWide) + signRules.arrowSpace;
            signData.lines[i].left = signRules.borderSpace + multiArrowSpacing;
        }else{
            signData.lines[i].left = signRules.borderSpace;
        }
        
        // inline symbols
        //signData.lines[i].spacing = 1;
        var letterIdx = fontlib.GetLetterIndexes(signData.lines[i].text, curFont);
        var lineWide = 0;
        var bSymBefore = false;
        for(var idx = 0; idx < letterIdx.length; idx++)
        {
            if(signData.lines[i].text.charAt(idx) == "\u00A7") // symbol insertion: §
            {
                var symInfo = layout.GetSymInfoFromStr(signData, signData.lines[i].text, idx);
                var leftSpace = (bSymBefore || idx==0?0:signRules.symbolSpacing);
                idx += symInfo.charCount-1;
                signData.symbols[symInfo.symIdx].left = lineWide + leftSpace + signRules.borderSpace;
                if(signData.lines[i].hasLArrow)
                {
                    signData.symbols[symInfo.symIdx].left += signRules.arrowSpace + signRules.horArrowWide;
                }
                if(signData.lines[i].centerOnSymbol)
                {
                    signData.symbols[symInfo.symIdx].top = currentLineTop + (signRules.textSize/2) - (symHeight/2);
                }else{
                    signData.symbols[symInfo.symIdx].top = currentLineTop - (symHeight - signRules.textSize);
                }
                lineWide += symInfo.width + leftSpace + (idx>=signData.lines[i].text.length-1?0:signRules.symbolSpacing);
                bSymBefore = true;
            }else{
                lineWide += curFont.letters[letterIdx[idx]].width;
                bSymBefore = false;
            }
        }
        signData.lines[i].lineWidth = lineWide;
        // use for placement
        if(lineWide > 0){
            if(signData.lines[i].hasLArrow){
                lineWide += multiArrowSpacing;
            }
        }
        if(lineWide + signRules.borderSpace > farthestTextPos)
        {
            farthestTextPos = lineWide + signRules.borderSpace;
        }
        if(signData.lines[i].bInsertLine)
        {
            signData.height += signRules.lineSeparatorSpace;
            currentLineTop += signRules.lineSeparatorSpace;
            arDividers[nDividerCount] = {};
            arDividers[nDividerCount].type = 0;
            arDividers[nDividerCount].pos = currentLineTop + signRules.textSize;
            nDividerCount++;
        }
    
        // calculate mileage sperate so I can get the left starting point of the miles
        if(signData.lines[i].mileage != "")
        {
            lineWide += signRules.arrowSpace;
            
            letterIdx = fontlib.GetLetterIndexes(signData.lines[i].mileage, curFont);
            signData.lines[i].mileWidth = 0;
            for(var idx = 0; idx < letterIdx.length; idx++)
            {
                signData.lines[i].mileWidth += curFont.letters[letterIdx[idx]].width;
            }
            signData.lines[i].mileRight = signRules.borderSpace + lineWide + signData.lines[i].mileWidth;
            lineWide += signData.lines[i].mileWidth;
            if(signData.lines[i].mileWidth > widestMile)
                widestMile = signData.lines[i].mileWidth;
            if(signData.lines[i].mileRight > milePlacement)
            {
                milePlacement = signData.lines[i].mileRight;
            }
            signData.lines[i].mileLeft = signData.lines[i].mileRight - signData.lines[i].mileWidth;
            signData.lines[i].mileTop = signData.lines[i].top;
        }
        
        if(signData.lines[i].hasRArrow > 0)
        {
            var myPos = signRules.borderSpace + lineWide + signRules.arrowSpace;
            if(myPos > rArrowPos)
                rArrowPos = myPos;
                
            lineWide += signRules.arrowSpace;
            if(signData.lines[i].hasRArrow > 1){
                lineWide += signRules.multiLineArrowHeight;
            }else{
                for(var arw = 0; arw < signData.arrows.length; arw++)
                {
                    if(signData.arrows[arw].lines.indexOf(i) != -1 && !signData.arrows[arw].leftSide)
                    {
                        lineWide += (signData.arrows[arw].id == 2?signRules.vertArrowWide:signRules.horArrowWide);
                        break;
                    }
                }
            }
        }
        signData.lines[i].lineWide = lineWide;
        if(lineWide > textWidth)
        {
            textWidth = lineWide;
            widestLine = i;
        }
    }
    signData.width = borders.GetNearestQuarter((signRules.borderSpace * 2) + textWidth);
    
    if(signRules.bArrowAfterText)
    {
        // right aligned
        milePlacement = farthestTextPos + signRules.arrowSpace + widestMile;
        var longestMile = 0;
        var bUpdateWidth = false;
        for(var i = 0; i < signData.lineCount; i++)
        {
            signData.lines[i].mileLeft = milePlacement - signData.lines[i].mileWidth;
            if(signData.lines[i].center && signData.lines[i].mileage == "")
            {
                signData.lines[i].left = (signData.width/2)-(signData.lines[i].lineWidth/2);
            }
        }
        rArrowPos = milePlacement + (widestMile>0?signRules.arrowSpace:0);
        for(var i = 0; i < signData.arrows.length; i++)
        {
            signData.arrows[i].size = signRules.horArrowHigh;
            if(signData.arrows[i].id == 2) // up arrow
            {
                signData.arrows[i].size = signRules.vertArrowHigh;
            }
            if(!signData.arrows[i].leftSide) // right arrow
            {
                signData.arrows[i].left = rArrowPos + (signData.arrows[i].id==2?signRules.horArrowWide-signRules.vertArrowWide:0);
                bUpdateWidth = true;
            }
            var arLines = signData.arrows[i].lines;
            if(arLines.length > 1)
            {
                // center on the lines
                var sum = 0;
                for(cnt = 0; cnt < arLines.length; cnt++)
                {
                    sum += signData.lines[arLines[cnt]].top;
                }
                signData.arrows[i].top = sum/arLines.length;
            }else if(signData.arrows[i].id == 2) // up arrows bottom align
            {
                signData.arrows[i].top = signData.lines[arLines[0]].top - (signRules.vertArrowHigh - signRules.horArrowHigh);
            }
        }
        // likely have changed the width
        if(bUpdateWidth)
            signData.width = borders.GetNearestQuarter((signRules.borderSpace * 2) + rArrowPos);
    }else{
        // at this point I have the widest line calculated, let us now align everything up with it...
        if(signData.lines[widestLine].hasRArrow > 0)
        {
            // line up all right arrows here..
            milePlacement = rArrowPos - (signData.lines[widestLine].hasRArrow > 1?signRules.multiLineArrowHeight:signRules.arrowSpace);
        }
        rArrowPos = textWidth + signRules.borderSpace - signRules.horArrowWide;
        for(var i = 0; i < signData.lineCount; i++)
        {
            if(signData.lines[i].center && signData.lines[i].mileage == "")
            {
                signData.lines[i].left = (signData.width/2)-(signData.lines[i].lineWidth/2);
            }
            if(i != widestLine)
            {
                if(signData.lines[i].hasRArrow > 0)
                {
                    signData.lines[i].mileLeft = rArrowPos - signRules.arrowSpace - signData.lines[i].mileWidth;
                }
                else{
                    signData.lines[i].mileLeft = rArrowPos + signRules.horArrowWide - signData.lines[i].mileWidth;
                }
            }
            if(signData.lines[i].mileage != "" && signData.lines[i].mileLines.length > 0)
            {
                var sum = 0;
                for(var mline = 0; mline < signData.lines[i].mileLines.length; mline++)
                {
                    sum += signData.lines[signData.lines[i].mileLines[mline]].top;
                }
                signData.lines[i].mileTop = sum/signData.lines[i].mileLines.length;
            }
        }
        for(var i = 0; i < signData.arrows.length; i++)
        {
            // update in case the text size has been changed
            if(signData.arrows[i].id == 2) // up arrow
            {
                signData.arrows[i].size = signData.arrows[i].size = (signData.arrows[i].lines.length > 1?signRules.multiLineArrowHeight:signRules.vertArrowHigh);
            }else{
                signData.arrows[i].size = (signData.arrows[i].lines.length > 1?signRules.multiLineArrowHeight:signRules.horArrowHigh);
            }
        
            var arLines = signData.arrows[i].lines;
            if(arLines.length > 1)
            {
                // center on the lines
                var sum = 0;
                for(cnt = 0; cnt < arLines.length; cnt++)
                {
                    sum += signData.lines[arLines[cnt]].top;
                }
                signData.arrows[i].top = sum/arLines.length;
            }else{
                // set the top equal to its line just in case I have a symbol
                signData.arrows[i].top = signData.lines[arLines[0]].top;
            }
            if(signData.arrows[i].id == 2) // up arrows bottom align
            {
                signData.arrows[i].top = signData.lines[arLines[0]].top - (signRules.vertArrowHigh - signRules.horArrowHigh);
            }
            if(!signData.arrows[i].leftSide) // right side arrow
            {
                signData.arrows[i].left = rArrowPos;
            }
        }
    }

    signData.inset = borders.CalculateInset(signData.width, signData.height, true);
    signData.radius = borders.CalcRadius(signData.width, signData.height);
    signData.borderWidth = borders.CalcBorderWidth(signData.width, signData.height);
    if(arDividers.length > 0)
    {
        for(var i = 0; i < arDividers.length; i++)
        {
            arDividers[i].w = signData.borderWidth;
            arDividers[i].pos += signData.borderWidth;///2;
        }
        signData.sections = borders.GetInsetSections(signData, arDividers);
    }else{
        if("sections" in signData)
        {
            delete signData.sections;
        }
    }
    
    var strJson = JSON.stringify(signData);
    return signData;
}

layout.GetSymInfoFromStr = function(signData, text, startIdx)
{
    var info = {};
    info.charCount = 0; // number of characters to skip
    info.width = 0;// width of the symbol
    info.symIdx = -1;
    var str = "";
    var group = 0;
    var id = 0;
    
    info.charCount++;
    var curChar = text.charAt(info.charCount + startIdx);
    var unwanted = ["[","]"];
    while(curChar != "]" &&  startIdx+info.charCount < text.length)
    {
        curChar = text.charAt(info.charCount + startIdx);
        if(unwanted.indexOf(curChar) == -1)
        {
            str += curChar;
        }
        info.charCount++;
    }
    id = Number(str);
    var idx = layout.GetSymbolIndexById(signData, id);
    if(idx == -1)
    {
        return info;
    }
    info.symIdx = idx;
    //var sym = signObjects[signData.symbols[idx].group].items[signData.symbols[idx].idx];
    var sym = common.findSymbolByIdx(signData.symbols[idx].group,signData.symbols[i].idx);
    if(signData.symbols[idx].border) // rec symbols are boxed in and bordered 
    {
        info.width = signData.symbols[idx].size;
    }else
    {
        var scale = signData.symbols[idx].size/sym.height;
        info.width = sym.width*scale;
    }
    return info;
}

layout.GetSymbolIndexById = function(signData, id)
{
    var idx = -1;
    for(var i = 0; i < signData.symbols.length; i++)
    {
        if(signData.symbols[i].id == id)
        {
            idx = i;
            break;
        }
    }
    return idx;
}

layout.SignDataToSVG = function(signData, previewSize, maxWidth)
{
    var signWidth = 0;
    var signHeight = 0;
    previewSize = previewSize || 0; // 0 means not a preview
    maxWidth = maxWidth || 0;
    // diamond signs have edges that are signData.width in length so when
    // it is rotated 45 degrees it generates a larger width and height
    // this is here to accomodate the preview to the appropriate size
    if(signData.shape == 2) // diamond
    {
        var mag = Number(borders.Magnitude2D(signData.width,signData.height).toFixed(3));
        signHeight = mag;
        signWidth = mag;
    }else{
        signWidth = signData.width;
        signHeight = signData.height;
    }    
    var strOut = "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0in\" y=\"0in\"";
    strOut += " viewBox=\"0 0 "+ signWidth + " "+ signHeight + "\"";
    if(previewSize != 0){
        scale = common.GetScaleFactor(signHeight, previewSize);
        if(maxWidth != 0 && (signWidth*scale) > maxWidth)
        {
            scale = common.GetScaleFactor(signWidth, maxWidth);
        }
        strOut += " width=\""+ (signWidth * scale).toFixed(4) + "px\" height=\""+ (signHeight * scale).toFixed(4) + "px\"";
    }else{
        strOut += " width=\""+ signWidth + "in\" height=\""+ signHeight + "in\"";
    }
    strOut += "\" xml:space=\"preserve\">";
    
    strOut += this.GenerateSignShapeSVG(signData);
    
    strOut += this.GenerateShapeSVG(signData);
    
    for(var i = 0; i < signData.symbols.length; i++)
    {
        var sym = common.findSymbolByIdx(signData.symbols[i].group,signData.symbols[i].idx)
        //var sym = signObjects[signData.symbols[i].group].items[signData.symbols[i].idx];
        var clr = signData.textColor;
        if("color" in signData.symbols[i] && signData.symbols[i].color != "")
        {
            clr = common.GetColorFromIndex(signData.symbols[i].color);
        }
        var svgInfo = svglib.GetDefaultTransformInfo(signData.symbols[i].size,signData.symbols[i].left,signData.symbols[i].top,clr);
        if("vertflip" in signData.symbols[i])
        {
            svgInfo.flipVert = signData.symbols[i].vertflip;
        }
        if("horflip" in signData.symbols[i])
        {
            svgInfo.flipHor = signData.symbols[i].horflip;
        }
        if("rotate" in signData.symbols[i])
        {
            svgInfo.rotate = signData.symbols[i].rotate;
        }
        if(signData.symbols[i].border)
        {
            strOut += this.GetSymWithBorderSvg(signData, sym,i);
        }else{
            //var scale = common.GetScaleFactor(sym.height, signData.symbols[i].size);
            var symPath =  '<svg width="'+sym.width+'" height="' + sym.height + '">';
            symPath += sym.bFill?'" <path d="' + sym.data + '"/></svg>':sym.data + '</svg>';
            strOut += svglib.TransformSVG(symPath, svgInfo);
        }
    }

    for(var i = 0; i < signData.lineCount; i++)
    {
        if(signData.lines[i].text != "")
        {
            var txtColor = signData.textColor;
            if("fill" in signData.lines[i])
            {
                txtColor = signData.lines[i].fill;
            }
            if(signData.lines[i].symbolCount > 0)
            {
                var arLines = signData.lines[i].text.split("\u00A7");
                var lineData = this.CreateLineData(signData, i, txtColor);
                for(var lns = 0; lns < arLines.length; lns++)
                {
                    var info = this.GetSymInfoFromStr(signData, arLines[lns], 0);
                    if(info.symIdx == -1)
                    {
                        lineData.text = arLines[lns];
                    }else{
                        lineData.text = arLines[lns].substr(info.charCount);
                        lineData.left = signData.symbols[info.symIdx].left + info.width + signData.symbols[info.symIdx].spacing;
                    }
                    if(lineData.text != ""){
                        strOut += "<path fill=\"" + txtColor + "\" d=\"";
                        strOut += this.DrawTextLine(lineData);
                        strOut += "\"/>";
                    }
                } // end for
                // now do mileage
                if(signData.lines[i].mileage != "")
                {
                    lineData = this.CreateMileLineData(signData, i, txtColor);
                    strOut += "<path fill=\"" + txtColor + "\" d=\"";
                    strOut += this.DrawTextLine(lineData);
                    strOut += "\"/>";
                }
            }else{
                var lineData = this.CreateLineData(signData, i, txtColor);
                strOut += "<path fill=\"" + txtColor + "\" d=\"";
                strOut += this.DrawTextLine(lineData);
                if(signData.lines[i].mileage != "")
                {
                    lineData = this.CreateMileLineData(signData, i, txtColor);
                    strOut += this.DrawTextLine(lineData);
                }
            
                strOut += "\"/>";
            } // end if else symbol count
        } // end if text
    } // end for
    for(i = 0; i < signData.arrows.length; i++)
    {
        strOut += "<path fill=\"" + signData.textColor + "\" d=\"";
        var svgData = svglib.ManipPathData(signArrowTypes[signData.arrows[i].id], signData.arrows[i].size,signData.arrows[i].left,signData.arrows[i].top);
        strOut += svgData + "\"/>";
    }
    strOut += "</svg>";
    return strOut;
}

layout.GenerateSignShapeSVG = function(signData)
{
    var strOut = "";
    if(!("shape" in signData))
    {
        signData.shape = 1; // default to rectangle
    }
    var fieldColor = signData.fieldColor;
    var textColor = signData.textColor;
    switch(signData.shape)
    {
        case 1: // rectangle
            strOut += "<rect x=\"0\" y=\"0\" fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" width=\""+ signData.width + "\" height=\"" + signData.height + "\" rx=\"" + signData.radius + "\"/>";
            if(signData.borderType == 2)
            {
                if("sections" in signData)
                {
                    strOut += this.GenerateSectionSVG(signData, fieldColor);
                }else{
                    //strOut += GenerateDividerBgSVG(signData, fieldColor);
                    strOut += "<rect x=\"" + signData.inset+ "\" y=\"" + signData.inset + "\" fill=\"" + fieldColor + "\" width=\""+ (signData.width - (signData.inset*2)) + "\" height=\"" + (signData.height - (signData.inset*2)) + "\" rx=\"" + (signData.radius-signData.inset) + "\"/>";
                }
            }else if(signData.borderType == 1)
            {
                // generate line border
                strOut += "<rect x=\"" + signData.inset+ "\" y=\"" + signData.inset + "\" fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" width=\""+ (signData.width - (signData.inset*2)) + "\" height=\"" + (signData.height - (signData.inset*2)) + "\" rx=\"" + (signData.radius-signData.inset) + "\"/>";
                if("sections" in signData)
                {
                    strOut += this.GenerateSectionSVG(signData, fieldColor);
                }else{
                    var innerLine = signData.borderWidth + signData.inset;
                    strOut += "<rect x=\"" + innerLine+ "\" y=\"" + innerLine + "\" fill=\"" + fieldColor + "\" width=\""+ (signData.width - (innerLine*2)) + "\" height=\"" + (signData.height - (innerLine*2)) + "\" rx=\"" + (signData.radius-innerLine) + "\"/>";
                }
            }
            break;
        case 2: // diamond
            // signData.width is the size of the edges
            var mag = Number(borders.Magnitude2D(signData.width,signData.height).toFixed(3));
            var transX = mag/2;
            signData.previewWidth = mag;
            signData.previewHeight = mag;
            // rotation: a = cos(a) b=sin(a) c=-sin(a) d=cos(a)
            // translate: e=x f=y            
            strOut += "<rect x=\"0\" y=\"0\" width=\"" + signData.width.toFixed(this.precision) + "\" height=\"" + signData.height.toFixed(this.precision) + "\" fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" rx=\"" + signData.radius + "\" transform=\"matrix(0.707 0.707 -0.707 0.707 " + transX.toFixed(4) + " 0)\"/> ";
            if(signData.borderType > 0)
            {
                mag = Number(borders.Magnitude2D(signData.width-(signData.inset*2),signData.height-(signData.inset*2)).toFixed(3));
                strOut += "<rect x=\"" + signData.inset + "\" y=\"" + signData.inset + "\" width=\"" + (signData.width - (signData.inset*2)).toFixed(this.precision) + "\" height=\"" + (signData.height - (signData.inset * 2)).toFixed(this.precision) + "\" fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" rx=\"" + (signData.radius-signData.inset) + "\" transform=\"matrix(0.707 0.707 -0.707 0.707 " + transX.toFixed(4) + " 0)\"/> ";
                if(signData.borderType == 1)
                {
                    mag = Number(borders.Magnitude2D(signData.width-(signData.inset*2)-(signData.borderWidth*2),signData.height-(signData.inset*2)-(signData.borderWidth*2)).toFixed(3));
                    strOut += "<rect x=\"" + (signData.inset+signData.borderWidth) + "\" y=\"" + (signData.inset + signData.borderWidth) + "\" width=\"" + (signData.width - (signData.inset*2)-(signData.borderWidth*2)).toFixed(this.precision) + "\" height=\"" + (signData.height - (signData.inset * 2)-(signData.borderWidth*2)).toFixed(this.precision) + "\" fill=\"" + fieldColor + "\" rx=\"" + (signData.radius-signData.inset - signData.borderWidth) + "\" transform=\"matrix(0.707 0.707 -0.707 0.707 " + transX.toFixed(4) + " 0)\"/> ";
                }
            }
            break;
        case 3: // octagon
            strOut += "<polygon fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" ";
            strOut += this.GetOctogonSVGPoints(signData.width, 0, 0);
            strOut += "/>";
            if(signData.borderType > 0)
            {
                strOut += "<polygon fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" ";
                strOut += this.GetOctogonSVGPoints(signData.width-(signData.inset*2), signData.inset, signData.inset);
                strOut += "/>";
                if(signData.borderType == 1)
                {
                    strOut += "<polygon fill=\"" + fieldColor + "\" ";
                    strOut += this.GetOctogonSVGPoints(signData.width-((signData.inset+signData.borderWidth)*2), signData.inset+signData.borderWidth, signData.inset+signData.borderWidth);
                    strOut += "/>";
                }
            }
            break;
        case 4: // yield (up-side-down triangle)
            // signData.width is the size of the edges
            strOut += "<path fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" ";
            strOut += this.GetYieldSVGPath(signData.width, signData.radius, 0,0);
            strOut += "/>";
            if(signData.borderType > 0)
            {
                // TODO: calculate the border properly!!!
                strOut += "<path fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" ";
                //strOut += GetYeildInsetSVGPath(signData.width, signData.radius, signData.inset, 0,0);
                var bForceRad = false;
                var radius = signData.radius;
                if("innerRadius" in signData && signData.borderType == 2 && signData.innerRadius > 0)
                {
                    bForceRad = true;
                    radius = signData.innerRadius;
                }
                strOut += this.GetYeildInsetSVGPath(signData.width, radius, signData.inset, 0,0, bForceRad);
                strOut += "/>";
                if(signData.borderType == 1)
                {
                    shortenBy = (signData.inset+signData.borderWidth)*2;
                    strOut += "<path fill=\"" + fieldColor + "\" ";
                    bForceRad = false;
                    radius = signData.radius;
                    if("innerRadius" in signData && signData.innerRadius > 0)
                    {
                        bForceRad = true;
                        radius = signData.innerRadius;
                    }
                    strOut += this.GetYeildInsetSVGPath(signData.width, radius, signData.inset+signData.borderWidth,0,0,bForceRad);
                    strOut += "/>";
                }
            }
            break;
        case 5: // circle
            var rad = signData.width/2;
            var centerX = signData.width/2;
            var centerY = signData.height/2;
            strOut += "<circle cx=\"" + centerX+ "\" cy=\"" + centerY + "\" r=\"" + rad + "\" fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\"/>";
            if(signData.borderType > 0)
            {
                rad -= signData.inset;
                strOut += "<circle cx=\"" + centerX+ "\" cy=\"" + centerY + "\" r=\"" + rad + "\" fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\"/>";
                if(signData.borderType == 1)
                {
                    rad -= signData.borderWidth;
                    strOut += "<circle cx=\"" + centerX+ "\" cy=\"" + centerY + "\" r=\"" + rad + "\" fill=\"" + fieldColor + "\"/>";
                }
            }
            break;
        case 6: // school pentagon
            // TODO: Fix Pentagon insets...
            strOut += "<path fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" ";
            strOut += this.GetSchoolPentagonSVG(signData.width, signData.radius);
            strOut += "/>";
            if(signData.borderType > 0)
            {
                strOut += "<path fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" ";
                strOut += this.GetSchoolPentagonInsetSVGPath(signData.width, signData.radius-signData.inset, signData.inset);
                strOut += "/>";
                if(signData.borderType == 1)
                {
                    strOut += "<path fill=\"" + fieldColor + "\" ";
                    strOut += this.GetSchoolPentagonInsetSVGPath(signData.width, signData.radius-(signData.inset+signData.borderWidth), signData.inset+signData.borderWidth);
                    strOut += "/>";
                }
            }
            break;
        case 7: // penant
            // with the penant, the width represents the length of the side, not width of the sign
            strOut += "<path fill=\"" + (signData.borderType==2?textColor:fieldColor) + "\" ";
            strOut += this.GetPenantSVG(signData.width, signData.height, signData.radius);
            strOut += "/>";
            if(signData.borderType > 0)
            {
                strOut += "<path fill=\"" + (signData.borderType==2?fieldColor:textColor) + "\" ";
                strOut += this.GetPenantSVG(signData.width, signData.height, signData.radius, signData.inset);
                strOut += "/>";
                if(signData.borderType == 1)
                {
                    strOut += "<path fill=\"" + fieldColor + "\" ";
                    strOut += this.GetPenantSVG(signData.width, signData.height, signData.radius, signData.inset+signData.borderWidth);
                    strOut += "/>";
                }
            }
            break;
        case 8: // Rail-road cross
            break;
        case 9: // interstate shield 1
            strOut += this.GetSizedObj(this.borderTypes[4], signData.height,0,0,fieldColor);
            break;
        case 10: // interstate shield 2 (wide)
            strOut += this.GetSizedObj(this.borderTypes[5], signData.height,0,0,fieldColor);
            break;
        case 11: // highway shield 1
            strOut += this.GetSizedObj(this.borderTypes[6], signData.height,0,0,fieldColor);
            break;
        case 12: // highway shield 2 (wide)
            strOut += this.GetSizedObj(this.borderTypes[7], signData.height,0,0,fieldColor);
            break;
        case 13: // beehive 1
            strOut += this.GetSizedObj(this.borderTypes[0], signData.height,0,0,fieldColor);
            break;
        case 14: // beehive 2
            strOut += this.GetSizedObj(this.borderTypes[1], signData.height,0,0,fieldColor);
            break;
        case 15: // county pentagon
            strOut += this.GetSizedObj(this.borderTypes[10], signData.height,0,0,fieldColor);
            break;
    }

    return strOut;
}

layout.GetSizedObj = function(obj, newHeight, transX, transY, fill)
{
    //var scale = newHeight/obj.height;
    return svglib.RenderSVG(obj.svgData, newHeight, transX,transY, fill);
    //return DrawPathData(obj.svgData, null, scale, transX, transY, true);
}

layout.GetOctogonSVGPoints = function(size, transX, transY)
{
    var radius = size/2;
    // calculate the size of each side
   var side = Math.abs(radius*Math.cos(22.5));
    var halfSide = side/2;
    //var side = size/3;
    var str = "points=\"";
    str += transX + "," + (radius - halfSide + transY) + " ";
    str += (radius - halfSide+transX) + "," + transY + " ";
    str+= (halfSide + radius+transX) + "," + transY + " ";
    str += (size+transX) + "," + (radius - halfSide+transY) + " ";
    str += (size+transX) + "," + (halfSide + radius+transY) + " ";
    str += (halfSide + radius+transX) + "," + (size+transY) + " ";
    str += (radius - halfSide +transX) + "," + (size+transY) + " ";
    str += transX + "," + (halfSide + radius+transY);
    str += "\"";
    return str;
}

layout.GetYieldCorners = function(width, radius)
{
    var arCorners = [];
    arCorners[0] = {};
    arCorners[0].x = 0;
    arCorners[0].y = 0;
    arCorners[0].r = radius;
    arCorners[1] = {};
    arCorners[1].x = width;
    arCorners[1].y = 0;
    arCorners[1].r = radius;
    arCorners[2] = {};
    arCorners[2].x = width/2;
    arCorners[2].y = Math.sqrt((width*width) - (arCorners[2].x*arCorners[2].x));
    arCorners[2].r = radius;
    return arCorners;
}
layout.GetYieldSVGPath = function(width, radius, transX, transY)
{
    var arCorners = this.GetYieldCorners(width, radius);
    var str = "d=\"";
    str += borders.GetRoundedPolySVG(arCorners, transX, transY);
    str += "\"";
    return str;
}

layout.GetYeildInsetSVGPath = function(width, radius, inset, transX,transY,bForceRadius)
{
    bForceRadius = (bForceRadius == null?false:bForceRadius);
    var arCorners = this.GetYieldCorners(width, radius);
    //arCorners = CalcSizedCorners(arCorners, inset, bForceRadius?radius:null);
    arCorners = borders.GetPolyInset(arCorners, inset, bForceRadius?radius:null);
    var str = "d=\"";
    str += borders.GetRoundedPolySVG(arCorners, transX, transY);
    str += "\"";
    return str;
}

layout.GetSchoolPentagonCorners = function(width, radius)
{
    var arCorners = [];
    arCorners[0] = {};
    arCorners[0].x = 0;
    arCorners[0].y = (width/2);
    arCorners[0].r = radius;
    arCorners[1] = {};
    arCorners[1].x = width/2;
    arCorners[1].y = 0;
    arCorners[1].r = radius;
    arCorners[2] = {};
    arCorners[2].x = width;
    arCorners[2].y = width/2;
    arCorners[2].r = radius;
    arCorners[3] = {};
    arCorners[3].x = width;
    arCorners[3].y = width;
    arCorners[3].r = radius;
    arCorners[4] = {};
    arCorners[4].x = 0;
    arCorners[4].y = width;
    arCorners[4].r = radius;
    return arCorners;
}
layout.GetSchoolPentagonSVG = function(width, radius)
{
    var arCorners = this.GetSchoolPentagonCorners(width,radius,0,0);
    var str = "d=\"";
    str += borders.GetRoundedPolySVG(arCorners, 0, 0);
    str += "\"";
    return str;
}

 layout.GetSchoolPentagonInsetSVGPath = function(width, radius, inset)
{
    var arCorners = this.GetSchoolPentagonCorners(width, radius);
    //arCorners = CalcSizedCorners(arCorners, inset, radius);
    arCorners = borders.GetPolyInset(arCorners, inset, radius);
    var str = "d=\"";
    str += borders.GetRoundedPolySVG(arCorners, 0, 0);
    str += "\"";
    return str;
}

layout.GetPenantSVG = function(width, height, radius, inset)
{
    inset = inset || 0;
    var rad = radius - inset;
    var halfY = height/2;
    var xDist = Math.sqrt((width*width) - (halfY*halfY));
    var arCorners = [];
    arCorners[0] = {};
    arCorners[0].x = 0;
    arCorners[0].y = 0;
    arCorners[0].r = rad;
    arCorners[1] = {};
    arCorners[1].x = xDist;
    arCorners[1].y = halfY;
    arCorners[1].r = rad;
    arCorners[2] = {};
    arCorners[2].x = 0;
    arCorners[2].y = height;
    arCorners[2].r = rad;
    if(inset > 0)
    {
        //arCorners = CalcSizedCorners(arCorners, inset, rad);
        arCorners = borders.GetPolyInset(arCorners, inset, rad);
    }
    var str = "d=\"";
    str += borders.GetRoundedPolySVG(arCorners, 0, 0);
    str += "\"";
    return str;
}

layout.GenerateShapeSVG = function(signData)
{
    if(("shapes" in signData) == false)
    {
        return "";
    }
    var str = "";
    for(var i = 0; i < signData.shapes.length; i++)
    {
        var fillStr = "";
        if("fill" in signData.shapes[i])
        {
            fillStr += "fill=\"" + signData.shapes[i].fill + "\" ";
        }
        if("stroke" in signData.shapes[i])
        {
            fillStr += "stroke=\"" + signData.shapes[i].stroke + "\" stroke-width=\"" + signData.shapes[i].strokeWidth + "\" ";
        }
        switch(signData.shapes[i].id)
        {
		default:
        case 1: // rectangle
            str += "<rect ";
            str += fillStr;
            str += "x=\"" + signData.shapes[i].x + "\" y=\"" + signData.shapes[i].y + "\" rx=\"" + signData.shapes[i].r + "\" ";
            str += "width=\"" + signData.shapes[i].w + "\" height=\"" + signData.shapes[i].h + "\"/>";
            break;
        case 2: // circle
            if(signData.shapes[i].w != signData.shapes[i].h)
            {
                str += "<ellipse cx=\"" + (signData.shapes[i].x+(signData.shapes[i].w/2)) + "\" cy=\"" + (signData.shapes[i].y+(signData.shapes[i].h/2)) + "\" rx=\"" + (signData.shapes[i].w/2) + "\" ry=\"" + (signData.shapes[i].h/2) + "\" ";
            }else{
                str += "<circle cx=\"" + (signData.shapes[i].x+(signData.shapes[i].w/2)) + "\" cy=\"" + (signData.shapes[i].y+(signData.shapes[i].w/2)) + "\" r=\"" + signData.shapes[i].w/2 + "\" ";
            }
            str += fillStr;
            str += "/>";
            break;
        case 3: // polygon
            var pts1 = borders.PolygonPoints(signData.shapes[i].r,signData.shapes[i].x+(signData.shapes[i].w/2),signData.shapes[i].y+(signData.shapes[i].w/2),signData.shapes[i].w/2,signData.shapes[i].h);
            str += "<polygon ";
            str += fillStr;
            str += "points=\"";
            for(var pt = 0; pt < signData.shapes[i].r; pt++)
            {
                str += pts1[pt].x.toFixed(4) + "," + pts1[pt].y.toFixed(4) + " ";
            }
            str += "\"/>";
            break;
        case 4: // star
            var radius = signData.shapes[i].w/2;
            var pts1 = borders.PolygonPoints(5,signData.shapes[i].x+radius,signData.shapes[i].y+radius,signData.shapes[i].w/2,0);
            var pts2 = borders.PolygonPoints(5,signData.shapes[i].x+radius,signData.shapes[i].y+radius,signData.shapes[i].w/5,36);
            str += "<polygon ";
            str += fillStr;
            str += "points=\"";
            for(var pt = 0; pt < 5; pt++)
            {
                str += pts1[pt].x.toFixed(4) + "," + pts1[pt].y.toFixed(4) + " ";
                str += pts2[pt].x.toFixed(4) + "," + pts2[pt].y.toFixed(4) + " ";
            }
            str += "\"/>";
            break;
        case 5: // diamond
            var wide = signData.shapes[i].w;
            var high = signData.shapes[i].h;
            var transX = signData.shapes[i].x;
            var transY = signData.shapes[i].y;
            var arCorners = [];
            arCorners[0] = {};
            arCorners[0].x = 0;
            arCorners[0].y = (high/2);
            arCorners[0].r = 0;
            arCorners[1] = {};
            arCorners[1].x = (wide/2);
            arCorners[1].y = 0;
            arCorners[1].r = 0;
            arCorners[2] = {};
            arCorners[2].x = wide;
            arCorners[2].y = (high/2);
            arCorners[2].r = 0;
            arCorners[3] = {};
            arCorners[3].x = (wide/2);
            arCorners[3].y = high;
            arCorners[3].r = 0;
            //var arCorners2 = CalcSizedCorners(arCorners, signData.shapes[i].r, 0);
            var arCorners2 = borders.GetPolyInset(arCorners,signData.shapes[i].r,0);
            var tmp = arCorners[1].x;
            arCorners[1].x = arCorners[3].x;
            arCorners[3].x = tmp;
            tmp = arCorners[1].y;
            arCorners[1].y = arCorners[3].y;
            arCorners[3].y = tmp;
            str += "<path ";
            str += fillStr;
            str += "d=\"";
            var strOuter = "";
            var strInner = "";
            for(var c = 0; c < 4; c++)
            {
                if(c > 0)
                {
                    strOuter += "L";
                    strInner += "L";
                }
                arCorners[c].x += signData.shapes[i].x;
                arCorners[c].y += signData.shapes[i].y;
                arCorners2[c].x += signData.shapes[i].x;
                arCorners2[c].y += signData.shapes[i].y;
                strOuter += arCorners[c].x.toFixed(4) + "," + arCorners[c].y.toFixed(4);
                strInner += arCorners2[c].x.toFixed(4) + "," + arCorners2[c].y.toFixed(4);
            }
            str += "M" + strOuter + "z " + "M" + strInner + "z";
            str += "\"/>";
            break;
        }
    }
    return str;
}

layout.GenerateSectionSVG = function(signData, fieldColor)
{
    if(!("sections" in signData))
    {
        return "";
    }
    var str = "";
    
    for(var i = 0; i < signData.sections.length; i++)
    {
        str += "<path fill=\"" + fieldColor + "\" d=\"";
        str += borders.GetRoundedPolySVG(signData.sections[i].corners, 0, 0);
        str += "\"/>";
    }
    return str;
}

layout.GetInsetSections = function(signData, dividers)
{
    sections = [];
    var nVert = 0;
    var nHor = 0;
    var inset = (signData.borderType == 1?signData.inset + signData.borderWidth:signData.inset);
    var radius = (signData.borderType == 1?signData.radius - (signData.inset + signData.borderWidth):signData.radius - signData.inset);
    if(signData.borderType == 0)
    {
        inset = 0;
        radius = signData.radius;
    }
    if(radius < 0)
        radius = 0;
    // generate separators
    var arHor = []; // record the index of the info
    var arVert = [];
    for(var i = 0; i < dividers.length; i++)
    {
        if(dividers[i].type == 0)
        {
            arHor[nHor] = i;
            nHor++;
        }
        else if(dividers[i].type == 1){
            arVert[nVert] = i;
            nVert++;
        }
    }
    arHor[nHor] = -1;
    nHor++; // a divider creates dividers + 1 sections to generate
    arVert[nVert] = -1;
    nVert++;
    var curRight = 0;
    var curLeft = inset;
    var curTop = inset;
    var curBottom = 0;
    var bAtTop = true;
    var bAtLeft = true;
    var count = 0;
    for(var row = 0; row < nHor; row++)
    {
        var horDivWide = 0;
        if(arHor[row] == -1)
        {
            // I have reached the bottom
            if(curBottom == 0) // I'm at the first
            {
                curTop = inset;
            }else{
                curTop = curBottom;
            }
            curBottom = signData.height - inset;
        }else{
            if(curBottom == 0) // I'm at the first
            {
                curTop = inset;
            }else{
                curTop = curBottom;
            }
            horDivWide = dividers[arHor[row]].w;
            curBottom = dividers[arHor[row]].pos - (horDivWide/2);
        }
        bAtLeft = true;
        for(var col = 0; col < nVert; col++)
        {
            curLeft = (bAtLeft?inset:curRight);
            var dividerWidth = 0;
            if(arVert[col] == -1)
            {
                curRight = signData.width - inset;
            }else{
                dividerWidth = dividers[arVert[col]].w;
                curRight = dividers[arVert[col]].pos - (dividerWidth/2);
            }
            sections[count] = {};
            sections[count].corners = [];
            sections[count].corners[0] = {};
            sections[count].corners[1] = {};
            sections[count].corners[2] = {};
            sections[count].corners[3] = {};
            sections[count].corners[0].x = curLeft;
            sections[count].corners[0].y = curTop;
            sections[count].corners[0].r = (bAtLeft && bAtTop?radius:0);
            sections[count].corners[1].x = curRight;
            sections[count].corners[1].y = curTop;
            sections[count].corners[1].r = ((col == nVert-1 && bAtTop)?radius:0);
            sections[count].corners[2].x = curRight;
            sections[count].corners[2].y = curBottom;
            sections[count].corners[2].r = ((row==nHor-1 && col == nVert-1)?radius:0);
            sections[count].corners[3].x = curLeft;
            sections[count].corners[3].y = curBottom;
            sections[count].corners[3].r = ((bAtLeft && row==nHor-1)?radius:0);
            count++;
            curRight += dividerWidth; // setup so the next left can be setup
            bAtLeft = false;
        }
        curBottom += horDivWide; // setup for the next top
        bAtTop = false;
    }
    return sections;
}

layout.GetSymWithBorderSvg = function(signData, symbol,idx, info)
{
    var svgStr = "";
    var symInfo = signData.symbols[idx];
    var size = signData.symbols[idx].size;
    var rad = borders.GetSymbolRadius(size,size);
    var inset = borders.GetSymbolInset(size);
    
    svgStr = "<rect x=\"" + symInfo.left + "\" y=\"" + symInfo.top + "\" fill=\"" + common.GetColorFromIndex(symInfo.color) + "\" width=\""+ size + "\" height=\"" + size + "\" rx=\"" + rad + "\"/>";
    svgStr += "<rect x=\"" + (symInfo.left + inset) + "\" y=\"" + (symInfo.top + inset) + "\" fill=\""+ signData.fieldColor + "\" width=\""+ (size-(inset*2)) + "\" height=\"" + (size-(inset*2)) + "\" rx=\"" + (rad-inset) + "\"/>";

    // now re-position and size the symbol
    var top = symInfo.top + (size/2); 
    var left = symInfo.left + (size/2);
    var tall = size * 0.8;
    var wide = tall;
    // always force max size...
    if(symbol.width > symbol.height)
    {
        tall = size * (symbol.height/symbol.width);
        tall *= 0.8;
    } else{
        wide = tall * (symbol.width/symbol.height);
    }
    top -= tall/2;
    left -= wide/2;
    var scale = common.GetScaleFactor(sym.height, signData.symbols[i].size);
    svgStr += '<path ' + svglib.SetAttributes("", 0, svgInfo) + ' fill="' + common.GetColorFromIndex(symInfo.color) + '" d="' +  this.RenderPathData(symbol.data, scale, left,top) + '"/>';
    //svgStr += svglib.RenderSVG(symbol.svgData, tall, left,top, signData.textColor);
    return svgStr;
}

layout.CreateLineData = function(signData, line, fontColor)
{
    // line data: {"size":4,"bottom":24,"left":0,"color":"#fff","center":true,"caps":true,"noEdit":false,"font":0,"text":""}
    var lineData = {};
    if("textSize" in signData.lines[line])
    {
        lineData.size = signData.lines[line].textSize;
        lineData.font = signData.lines[line].fontId;
    }else{
        lineData.size = signData.textSize;
        lineData.font = signData.fontId;
    }
    lineData.bottom = signData.lines[line].top;
    lineData.left = signData.lines[line].left;
    lineData.center = false;
    lineData.color = fontColor;
    lineData.caps = false;
    lineData.noEdit = false;
    lineData.text = signData.lines[line].text;
    lineData.spacing = signData.lines[line].spacing;
    return lineData;
}

layout.DrawTextLine = function(lineData)
{
    return fontlib.StringSVG(lineData.text, lineData.font, lineData.size, lineData.left, lineData.bottom, lineData.spacing);
}

layout.CreateMileLineData = function(signData, line, fontColor)
{
    // line data: {"size":4,"bottom":24,"left":0,"color":"#fff","center":true,"caps":true,"noEdit":false,"font":0,"text":""}
    var lineData = {};
    if("textSize" in signData.lines[line])
    {
        lineData.size = signData.lines[line].textSize;
        lineData.font = signData.lines[line].fontId;
    }else{
        lineData.size = signData.textSize;
        lineData.font = signData.fontId;
    }
    lineData.bottom = signData.lines[line].mileTop + signData.textSize;
    lineData.left = signData.lines[line].mileLeft;
    lineData.center = false;
    lineData.color = fontColor;
    lineData.caps = false;
    lineData.noEdit = false;
    lineData.text = signData.lines[line].mileage;
    lineData.spacing = signData.lines[line].spacing;
    return lineData;
}
